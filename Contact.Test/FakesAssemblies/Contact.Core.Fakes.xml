<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Contact.Core.Fakes</name>
    </assembly>
    <members>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimBranch">
            <summary>Shim type of Contact.Core.DataAccess.Branch</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimBranch.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimBranch.#ctor(Contact.Core.DataAccess.Branch)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimBranch.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimBranch.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchAddressGet">
            <summary>Sets the shim of Branch.get_BranchAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchAddressSetString">
            <summary>Sets the shim of Branch.set_BranchAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchIDGet">
            <summary>Sets the shim of Branch.get_BranchID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchIDSetInt32">
            <summary>Sets the shim of Branch.set_BranchID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchNameGet">
            <summary>Sets the shim of Branch.get_BranchName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.BranchNameSetString">
            <summary>Sets the shim of Branch.set_BranchName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.Constructor">
            <summary>Sets the shim of Branch.Branch()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.EmailAddressGet">
            <summary>Sets the shim of Branch.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.EmailAddressSetString">
            <summary>Sets the shim of Branch.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.EmployeesGet">
            <summary>Sets the shim of Branch.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Branch.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.PhoneNumberGet">
            <summary>Sets the shim of Branch.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.PhoneNumberSetString">
            <summary>Sets the shim of Branch.set_PhoneNumber(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.createBranch">
            <summary>Sets the shim of Branch.create(Branch model)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchAddressGet">
            <summary>Sets the shim of Branch.get_BranchAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchAddressSetString">
            <summary>Sets the shim of Branch.set_BranchAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchIDGet">
            <summary>Sets the shim of Branch.get_BranchID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchIDSetInt32">
            <summary>Sets the shim of Branch.set_BranchID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchNameGet">
            <summary>Sets the shim of Branch.get_BranchName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.BranchNameSetString">
            <summary>Sets the shim of Branch.set_BranchName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.EmailAddressGet">
            <summary>Sets the shim of Branch.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of Branch.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.EmployeesGet">
            <summary>Sets the shim of Branch.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Branch.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.PhoneNumberGet">
            <summary>Sets the shim of Branch.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.PhoneNumberSetString">
            <summary>Sets the shim of Branch.set_PhoneNumber(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimBranch.AllInstances.createBranch">
            <summary>Sets the shim of Branch.create(Branch model)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimContact">
            <summary>Shim type of Contact.Core.DataAccess.Contact</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimContact.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimContact.#ctor(Contact.Core.DataAccess.Contact)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimContact.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimContact.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AddressGet">
            <summary>Sets the shim of Contact.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AddressSetString">
            <summary>Sets the shim of Contact.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.Constructor">
            <summary>Sets the shim of Contact.Contact()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.ContactIDGet">
            <summary>Sets the shim of Contact.get_ContactID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.ContactIDSetInt32">
            <summary>Sets the shim of Contact.set_ContactID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.EmailAddressGet">
            <summary>Sets the shim of Contact.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.EmailAddressSetString">
            <summary>Sets the shim of Contact.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.NameGet">
            <summary>Sets the shim of Contact.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.NameSetString">
            <summary>Sets the shim of Contact.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.PhoneNumberGet">
            <summary>Sets the shim of Contact.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.PhoneNumberSetString">
            <summary>Sets the shim of Contact.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.AddressGet">
            <summary>Sets the shim of Contact.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.AddressSetString">
            <summary>Sets the shim of Contact.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.ContactIDGet">
            <summary>Sets the shim of Contact.get_ContactID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.ContactIDSetInt32">
            <summary>Sets the shim of Contact.set_ContactID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.EmailAddressGet">
            <summary>Sets the shim of Contact.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of Contact.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.NameGet">
            <summary>Sets the shim of Contact.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.NameSetString">
            <summary>Sets the shim of Contact.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.PhoneNumberGet">
            <summary>Sets the shim of Contact.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimContact.AllInstances.PhoneNumberSetString">
            <summary>Sets the shim of Contact.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimCountry">
            <summary>Shim type of Contact.Core.DataAccess.Country</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCountry.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCountry.#ctor(Contact.Core.DataAccess.Country)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCountry.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCountry.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.Constructor">
            <summary>Sets the shim of Country.Country()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.CountryIDGet">
            <summary>Sets the shim of Country.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.CountryIDSetInt32">
            <summary>Sets the shim of Country.set_CountryID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.EmployeesGet">
            <summary>Sets the shim of Country.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Country.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.NameGet">
            <summary>Sets the shim of Country.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.NameSetString">
            <summary>Sets the shim of Country.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.CountryIDGet">
            <summary>Sets the shim of Country.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.CountryIDSetInt32">
            <summary>Sets the shim of Country.set_CountryID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.EmployeesGet">
            <summary>Sets the shim of Country.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Country.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.NameGet">
            <summary>Sets the shim of Country.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCountry.AllInstances.NameSetString">
            <summary>Sets the shim of Country.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimCustomers1">
            <summary>Shim type of Contact.Core.DataAccess.Customers1</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCustomers1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCustomers1.#ctor(Contact.Core.DataAccess.Customers1)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCustomers1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimCustomers1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AddressGet">
            <summary>Sets the shim of Customers1.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AddressSetString">
            <summary>Sets the shim of Customers1.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.Constructor">
            <summary>Sets the shim of Customers1.Customers1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.CustomerIDGet">
            <summary>Sets the shim of Customers1.get_CustomerID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.CustomerIDSetInt32">
            <summary>Sets the shim of Customers1.set_CustomerID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.EmailAddressGet">
            <summary>Sets the shim of Customers1.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.EmailAddressSetString">
            <summary>Sets the shim of Customers1.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.FirstNameGet">
            <summary>Sets the shim of Customers1.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.FirstNameSetString">
            <summary>Sets the shim of Customers1.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.LastNameGet">
            <summary>Sets the shim of Customers1.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.LastNameSetString">
            <summary>Sets the shim of Customers1.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.PhoneNumberGet">
            <summary>Sets the shim of Customers1.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.PhoneNumberSetString">
            <summary>Sets the shim of Customers1.set_PhoneNumber(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.ProfessionGet">
            <summary>Sets the shim of Customers1.get_Profession()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.ProfessionSetString">
            <summary>Sets the shim of Customers1.set_Profession(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.SexGet">
            <summary>Sets the shim of Customers1.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.SexSetString">
            <summary>Sets the shim of Customers1.set_Sex(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.AddressGet">
            <summary>Sets the shim of Customers1.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.AddressSetString">
            <summary>Sets the shim of Customers1.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.CustomerIDGet">
            <summary>Sets the shim of Customers1.get_CustomerID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.CustomerIDSetInt32">
            <summary>Sets the shim of Customers1.set_CustomerID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.EmailAddressGet">
            <summary>Sets the shim of Customers1.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of Customers1.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.FirstNameGet">
            <summary>Sets the shim of Customers1.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.FirstNameSetString">
            <summary>Sets the shim of Customers1.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.LastNameGet">
            <summary>Sets the shim of Customers1.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.LastNameSetString">
            <summary>Sets the shim of Customers1.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.PhoneNumberGet">
            <summary>Sets the shim of Customers1.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.PhoneNumberSetString">
            <summary>Sets the shim of Customers1.set_PhoneNumber(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.ProfessionGet">
            <summary>Sets the shim of Customers1.get_Profession()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.ProfessionSetString">
            <summary>Sets the shim of Customers1.set_Profession(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.SexGet">
            <summary>Sets the shim of Customers1.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimCustomers1.AllInstances.SexSetString">
            <summary>Sets the shim of Customers1.set_Sex(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDataEntities">
            <summary>Shim type of Contact.Core.DataAccess.DataEntities</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.#ctor(Contact.Core.DataAccess.DataEntities)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.Bind(System.Data.Entity.Infrastructure.IObjectContextAdapter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataEntities.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.BranchesGet">
            <summary>Sets the shim of DataEntities.get_Branches()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.BranchesSetDbSetOfBranch">
            <summary>Sets the shim of DataEntities.set_Branches(DbSet`1&lt;Branch&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.Constructor">
            <summary>Sets the shim of DataEntities.DataEntities()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.ContactsGet">
            <summary>Sets the shim of DataEntities.get_Contacts()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.ContactsSetDbSetOfContact">
            <summary>Sets the shim of DataEntities.set_Contacts(DbSet`1&lt;Contact&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.CountrysGet">
            <summary>Sets the shim of DataEntities.get_Countrys()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.CountrysSetDbSetOfCountry">
            <summary>Sets the shim of DataEntities.set_Countrys(DbSet`1&lt;Country&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.Customers1Get">
            <summary>Sets the shim of DataEntities.get_Customers1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.Customers1SetDbSetOfCustomers1">
            <summary>Sets the shim of DataEntities.set_Customers1(DbSet`1&lt;Customers1&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.DepartmentsGet">
            <summary>Sets the shim of DataEntities.get_Departments()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.DepartmentsSetDbSetOfDepartment">
            <summary>Sets the shim of DataEntities.set_Departments(DbSet`1&lt;Department&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.EmployeesGet">
            <summary>Sets the shim of DataEntities.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.EmployeesSetDbSetOfEmployee">
            <summary>Sets the shim of DataEntities.set_Employees(DbSet`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.OnModelCreatingDbModelBuilder">
            <summary>Sets the shim of DataEntities.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.PermissionsGet">
            <summary>Sets the shim of DataEntities.get_Permissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.PermissionsSetDbSetOfPermission">
            <summary>Sets the shim of DataEntities.set_Permissions(DbSet`1&lt;Permission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.RolePermissionsGet">
            <summary>Sets the shim of DataEntities.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.RolePermissionsSetDbSetOfRolePermission">
            <summary>Sets the shim of DataEntities.set_RolePermissions(DbSet`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.RolesGet">
            <summary>Sets the shim of DataEntities.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.RolesSetDbSetOfRole">
            <summary>Sets the shim of DataEntities.set_Roles(DbSet`1&lt;Role&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.StatesGet">
            <summary>Sets the shim of DataEntities.get_States()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.StatesSetDbSetOfState">
            <summary>Sets the shim of DataEntities.set_States(DbSet`1&lt;State&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.UserRolesGet">
            <summary>Sets the shim of DataEntities.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.UserRolesSetDbSetOfUserRole">
            <summary>Sets the shim of DataEntities.set_UserRoles(DbSet`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.UsersGet">
            <summary>Sets the shim of DataEntities.get_Users()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.UsersSetDbSetOfUser">
            <summary>Sets the shim of DataEntities.set_Users(DbSet`1&lt;User&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.BranchesGet">
            <summary>Sets the shim of DataEntities.get_Branches()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.BranchesSetDbSetOfBranch">
            <summary>Sets the shim of DataEntities.set_Branches(DbSet`1&lt;Branch&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.ContactsGet">
            <summary>Sets the shim of DataEntities.get_Contacts()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.ContactsSetDbSetOfContact">
            <summary>Sets the shim of DataEntities.set_Contacts(DbSet`1&lt;Contact&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.CountrysGet">
            <summary>Sets the shim of DataEntities.get_Countrys()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.CountrysSetDbSetOfCountry">
            <summary>Sets the shim of DataEntities.set_Countrys(DbSet`1&lt;Country&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.Customers1Get">
            <summary>Sets the shim of DataEntities.get_Customers1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.Customers1SetDbSetOfCustomers1">
            <summary>Sets the shim of DataEntities.set_Customers1(DbSet`1&lt;Customers1&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.DepartmentsGet">
            <summary>Sets the shim of DataEntities.get_Departments()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.DepartmentsSetDbSetOfDepartment">
            <summary>Sets the shim of DataEntities.set_Departments(DbSet`1&lt;Department&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.EmployeesGet">
            <summary>Sets the shim of DataEntities.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.EmployeesSetDbSetOfEmployee">
            <summary>Sets the shim of DataEntities.set_Employees(DbSet`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.OnModelCreatingDbModelBuilder">
            <summary>Sets the shim of DataEntities.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.PermissionsGet">
            <summary>Sets the shim of DataEntities.get_Permissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.PermissionsSetDbSetOfPermission">
            <summary>Sets the shim of DataEntities.set_Permissions(DbSet`1&lt;Permission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.RolePermissionsGet">
            <summary>Sets the shim of DataEntities.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.RolePermissionsSetDbSetOfRolePermission">
            <summary>Sets the shim of DataEntities.set_RolePermissions(DbSet`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.RolesGet">
            <summary>Sets the shim of DataEntities.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.RolesSetDbSetOfRole">
            <summary>Sets the shim of DataEntities.set_Roles(DbSet`1&lt;Role&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.StatesGet">
            <summary>Sets the shim of DataEntities.get_States()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.StatesSetDbSetOfState">
            <summary>Sets the shim of DataEntities.set_States(DbSet`1&lt;State&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.UserRolesGet">
            <summary>Sets the shim of DataEntities.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.UserRolesSetDbSetOfUserRole">
            <summary>Sets the shim of DataEntities.set_UserRoles(DbSet`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.UsersGet">
            <summary>Sets the shim of DataEntities.get_Users()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataEntities.AllInstances.UsersSetDbSetOfUser">
            <summary>Sets the shim of DataEntities.set_Users(DbSet`1&lt;User&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDataRepository">
            <summary>Shim type of Contact.Core.DataAccess.DataRepository</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of DataRepository.Add(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.Bind(Contact.Core.Interfaces.IDataRepository)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.DeleteOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of DataRepository.Delete(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.ExecuteOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of DataRepository.Execute(String sql)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.ExecuteOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of DataRepository.Execute(String sprocname, Object args)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.GetByIDOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>Sets the shim of DataRepository.GetByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of DataRepository.Get()</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.GetOf1ExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of DataRepository.Get(Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] includeProperties)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.UpdateOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of DataRepository.Update(!!0 entity)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.ConstructorDataEntities">
            <summary>Sets the shim of DataRepository.DataRepository(DataEntities context)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.Dispose">
            <summary>Sets the shim of DataRepository.Dispose()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.ExecuteString">
            <summary>Sets the shim of DataRepository.Execute(String sql)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.ExecuteStringObject">
            <summary>Sets the shim of DataRepository.Execute(String sql, Object args)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.SaveChanges">
            <summary>Sets the shim of DataRepository.SaveChanges()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.SaveChangesAsync">
            <summary>Sets the shim of DataRepository.SaveChangesAsync()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository._SaveChangesb__7DbValidationError">
            <summary>Sets the shim of DataRepository.&lt;SaveChanges&gt;b__7(DbValidationError e)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository._SaveChangesb__8StringString">
            <summary>Sets the shim of DataRepository.&lt;SaveChanges&gt;b__8(String ag, String e)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Contact.Core.DataAccess.DataRepository,``0})">
            <summary>Sets the shim of DataRepository.Add(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.DeleteOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Contact.Core.DataAccess.DataRepository,``0})">
            <summary>Sets the shim of DataRepository.Delete(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.ExecuteOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Contact.Core.DataAccess.DataRepository,System.String,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of DataRepository.Execute(String sql)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.ExecuteOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Contact.Core.DataAccess.DataRepository,System.String,System.Object,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of DataRepository.Execute(String sprocname, Object args)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.GetByIDOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Contact.Core.DataAccess.DataRepository,System.Int32,``0})">
            <summary>Sets the shim of DataRepository.GetByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Contact.Core.DataAccess.DataRepository,System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of DataRepository.Get()</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.GetOf1ExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Contact.Core.DataAccess.DataRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Sets the shim of DataRepository.Get(Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] includeProperties)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.UpdateOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Contact.Core.DataAccess.DataRepository,``0})">
            <summary>Sets the shim of DataRepository.Update(!!0 entity)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.Dispose">
            <summary>Sets the shim of DataRepository.Dispose()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.ExecuteString">
            <summary>Sets the shim of DataRepository.Execute(String sql)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.ExecuteStringObject">
            <summary>Sets the shim of DataRepository.Execute(String sql, Object args)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.SaveChanges">
            <summary>Sets the shim of DataRepository.SaveChanges()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDataRepository.AllInstances.SaveChangesAsync">
            <summary>Sets the shim of DataRepository.SaveChangesAsync()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDepartment">
            <summary>Shim type of Contact.Core.DataAccess.Department</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDepartment.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDepartment.#ctor(Contact.Core.DataAccess.Department)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDepartment.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimDepartment.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.Constructor">
            <summary>Sets the shim of Department.Department()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.DeptIDGet">
            <summary>Sets the shim of Department.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.DeptIDSetInt32">
            <summary>Sets the shim of Department.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.DescriptionGet">
            <summary>Sets the shim of Department.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.DescriptionSetString">
            <summary>Sets the shim of Department.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.EmployeesGet">
            <summary>Sets the shim of Department.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Department.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.NameGet">
            <summary>Sets the shim of Department.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.NameSetString">
            <summary>Sets the shim of Department.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.DeptIDGet">
            <summary>Sets the shim of Department.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.DeptIDSetInt32">
            <summary>Sets the shim of Department.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.DescriptionGet">
            <summary>Sets the shim of Department.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.DescriptionSetString">
            <summary>Sets the shim of Department.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.EmployeesGet">
            <summary>Sets the shim of Department.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.EmployeesSetICollectionOfEmployee">
            <summary>Sets the shim of Department.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.NameGet">
            <summary>Sets the shim of Department.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimDepartment.AllInstances.NameSetString">
            <summary>Sets the shim of Department.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimEmployee">
            <summary>Shim type of Contact.Core.DataAccess.Employee</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimEmployee.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimEmployee.#ctor(Contact.Core.DataAccess.Employee)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimEmployee.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimEmployee.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AddressGet">
            <summary>Sets the shim of Employee.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AddressSetString">
            <summary>Sets the shim of Employee.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.BranchGet">
            <summary>Sets the shim of Employee.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.BranchIDGet">
            <summary>Sets the shim of Employee.get_BranchID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.BranchIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_BranchID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.BranchSetBranch">
            <summary>Sets the shim of Employee.set_Branch(Branch value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Constructor">
            <summary>Sets the shim of Employee.Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.CountryGet">
            <summary>Sets the shim of Employee.get_Country()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.CountryIDGet">
            <summary>Sets the shim of Employee.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.CountryIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_CountryID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.CountrySetCountry">
            <summary>Sets the shim of Employee.set_Country(Country value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DateOfBirthGet">
            <summary>Sets the shim of Employee.get_DateOfBirth()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DateOfBirthSetNullableOfDateTime">
            <summary>Sets the shim of Employee.set_DateOfBirth(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DepartmentGet">
            <summary>Sets the shim of Employee.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DepartmentSetDepartment">
            <summary>Sets the shim of Employee.set_Department(Department value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DeptIDGet">
            <summary>Sets the shim of Employee.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DeptIDSetInt32">
            <summary>Sets the shim of Employee.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DesignationGet">
            <summary>Sets the shim of Employee.get_Designation()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.DesignationSetString">
            <summary>Sets the shim of Employee.set_Designation(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Employee1Get">
            <summary>Sets the shim of Employee.get_Employee1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Employee1SetEmployee">
            <summary>Sets the shim of Employee.set_Employee1(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Employees1Get">
            <summary>Sets the shim of Employee.get_Employees1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.Employees1SetEmployee">
            <summary>Sets the shim of Employee.set_Employees1(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.EmploymentDateGet">
            <summary>Sets the shim of Employee.get_EmploymentDate()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.EmploymentDateSetNullableOfDateTime">
            <summary>Sets the shim of Employee.set_EmploymentDate(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.FileNameGet">
            <summary>Sets the shim of Employee.get_FileName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.FileNameSetString">
            <summary>Sets the shim of Employee.set_FileName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.FirstNameGet">
            <summary>Sets the shim of Employee.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.FirstNameSetString">
            <summary>Sets the shim of Employee.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.IMageDataGet">
            <summary>Sets the shim of Employee.get_IMageData()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.IMageDataSetByteArray">
            <summary>Sets the shim of Employee.set_IMageData(Byte[] value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.LastNameGet">
            <summary>Sets the shim of Employee.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.LastNameSetString">
            <summary>Sets the shim of Employee.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.ReportingToGet">
            <summary>Sets the shim of Employee.get_ReportingTo()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.ReportingToSetString">
            <summary>Sets the shim of Employee.set_ReportingTo(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.SexGet">
            <summary>Sets the shim of Employee.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.SexSetString">
            <summary>Sets the shim of Employee.set_Sex(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.StateGet">
            <summary>Sets the shim of Employee.get_State()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.StateIDGet">
            <summary>Sets the shim of Employee.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.StateIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_StateID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.StateSetState">
            <summary>Sets the shim of Employee.set_State(State value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.UserGet">
            <summary>Sets the shim of Employee.get_User()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.UserIDGet">
            <summary>Sets the shim of Employee.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.UserIDSetInt32">
            <summary>Sets the shim of Employee.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.UserSetUser">
            <summary>Sets the shim of Employee.set_User(User value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.AddressGet">
            <summary>Sets the shim of Employee.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.AddressSetString">
            <summary>Sets the shim of Employee.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.BranchGet">
            <summary>Sets the shim of Employee.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.BranchIDGet">
            <summary>Sets the shim of Employee.get_BranchID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.BranchIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_BranchID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.BranchSetBranch">
            <summary>Sets the shim of Employee.set_Branch(Branch value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.CountryGet">
            <summary>Sets the shim of Employee.get_Country()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.CountryIDGet">
            <summary>Sets the shim of Employee.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.CountryIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_CountryID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.CountrySetCountry">
            <summary>Sets the shim of Employee.set_Country(Country value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DateOfBirthGet">
            <summary>Sets the shim of Employee.get_DateOfBirth()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DateOfBirthSetNullableOfDateTime">
            <summary>Sets the shim of Employee.set_DateOfBirth(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DepartmentGet">
            <summary>Sets the shim of Employee.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DepartmentSetDepartment">
            <summary>Sets the shim of Employee.set_Department(Department value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DeptIDGet">
            <summary>Sets the shim of Employee.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DeptIDSetInt32">
            <summary>Sets the shim of Employee.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DesignationGet">
            <summary>Sets the shim of Employee.get_Designation()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.DesignationSetString">
            <summary>Sets the shim of Employee.set_Designation(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.Employee1Get">
            <summary>Sets the shim of Employee.get_Employee1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.Employee1SetEmployee">
            <summary>Sets the shim of Employee.set_Employee1(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.Employees1Get">
            <summary>Sets the shim of Employee.get_Employees1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.Employees1SetEmployee">
            <summary>Sets the shim of Employee.set_Employees1(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.EmploymentDateGet">
            <summary>Sets the shim of Employee.get_EmploymentDate()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.EmploymentDateSetNullableOfDateTime">
            <summary>Sets the shim of Employee.set_EmploymentDate(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.FileNameGet">
            <summary>Sets the shim of Employee.get_FileName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.FileNameSetString">
            <summary>Sets the shim of Employee.set_FileName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.FirstNameGet">
            <summary>Sets the shim of Employee.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.FirstNameSetString">
            <summary>Sets the shim of Employee.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.IMageDataGet">
            <summary>Sets the shim of Employee.get_IMageData()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.IMageDataSetByteArray">
            <summary>Sets the shim of Employee.set_IMageData(Byte[] value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.LastNameGet">
            <summary>Sets the shim of Employee.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.LastNameSetString">
            <summary>Sets the shim of Employee.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.ReportingToGet">
            <summary>Sets the shim of Employee.get_ReportingTo()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.ReportingToSetString">
            <summary>Sets the shim of Employee.set_ReportingTo(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.SexGet">
            <summary>Sets the shim of Employee.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.SexSetString">
            <summary>Sets the shim of Employee.set_Sex(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.StateGet">
            <summary>Sets the shim of Employee.get_State()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.StateIDGet">
            <summary>Sets the shim of Employee.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.StateIDSetNullableOfInt32">
            <summary>Sets the shim of Employee.set_StateID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.StateSetState">
            <summary>Sets the shim of Employee.set_State(State value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.UserGet">
            <summary>Sets the shim of Employee.get_User()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.UserIDGet">
            <summary>Sets the shim of Employee.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of Employee.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimEmployee.AllInstances.UserSetUser">
            <summary>Sets the shim of Employee.set_User(User value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimPermission">
            <summary>Shim type of Contact.Core.DataAccess.Permission</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimPermission.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimPermission.#ctor(Contact.Core.DataAccess.Permission)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimPermission.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimPermission.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.Constructor">
            <summary>Sets the shim of Permission.Permission()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.DescriptionGet">
            <summary>Sets the shim of Permission.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.DescriptionSetString">
            <summary>Sets the shim of Permission.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.NameGet">
            <summary>Sets the shim of Permission.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.NameSetString">
            <summary>Sets the shim of Permission.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.PermissionIDGet">
            <summary>Sets the shim of Permission.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.PermissionIDSetInt32">
            <summary>Sets the shim of Permission.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.RolePermissionsGet">
            <summary>Sets the shim of Permission.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the shim of Permission.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.DescriptionGet">
            <summary>Sets the shim of Permission.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.DescriptionSetString">
            <summary>Sets the shim of Permission.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.NameGet">
            <summary>Sets the shim of Permission.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.NameSetString">
            <summary>Sets the shim of Permission.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.PermissionIDGet">
            <summary>Sets the shim of Permission.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.PermissionIDSetInt32">
            <summary>Sets the shim of Permission.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.RolePermissionsGet">
            <summary>Sets the shim of Permission.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimPermission.AllInstances.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the shim of Permission.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimRole">
            <summary>Shim type of Contact.Core.DataAccess.Role</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRole.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRole.#ctor(Contact.Core.DataAccess.Role)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRole.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRole.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.Constructor">
            <summary>Sets the shim of Role.Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.DescriptionGet">
            <summary>Sets the shim of Role.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.DescriptionSetString">
            <summary>Sets the shim of Role.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.NameGet">
            <summary>Sets the shim of Role.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.NameSetString">
            <summary>Sets the shim of Role.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.RoleIDGet">
            <summary>Sets the shim of Role.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.RoleIDSetInt32">
            <summary>Sets the shim of Role.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.RolePermissionsGet">
            <summary>Sets the shim of Role.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the shim of Role.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.UserRolesGet">
            <summary>Sets the shim of Role.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.UserRolesSetICollectionOfUserRole">
            <summary>Sets the shim of Role.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.DescriptionGet">
            <summary>Sets the shim of Role.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.DescriptionSetString">
            <summary>Sets the shim of Role.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.NameGet">
            <summary>Sets the shim of Role.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.NameSetString">
            <summary>Sets the shim of Role.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.RoleIDGet">
            <summary>Sets the shim of Role.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.RoleIDSetInt32">
            <summary>Sets the shim of Role.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.RolePermissionsGet">
            <summary>Sets the shim of Role.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the shim of Role.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.UserRolesGet">
            <summary>Sets the shim of Role.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRole.AllInstances.UserRolesSetICollectionOfUserRole">
            <summary>Sets the shim of Role.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimRolePermission">
            <summary>Shim type of Contact.Core.DataAccess.RolePermission</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRolePermission.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRolePermission.#ctor(Contact.Core.DataAccess.RolePermission)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRolePermission.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimRolePermission.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.Constructor">
            <summary>Sets the shim of RolePermission.RolePermission()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.PermissionGet">
            <summary>Sets the shim of RolePermission.get_Permission()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.PermissionIDGet">
            <summary>Sets the shim of RolePermission.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.PermissionIDSetInt32">
            <summary>Sets the shim of RolePermission.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.PermissionSetPermission">
            <summary>Sets the shim of RolePermission.set_Permission(Permission value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RoleGet">
            <summary>Sets the shim of RolePermission.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RoleIDGet">
            <summary>Sets the shim of RolePermission.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RoleIDSetInt32">
            <summary>Sets the shim of RolePermission.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RolePermissionIDGet">
            <summary>Sets the shim of RolePermission.get_RolePermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RolePermissionIDSetInt32">
            <summary>Sets the shim of RolePermission.set_RolePermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.RoleSetRole">
            <summary>Sets the shim of RolePermission.set_Role(Role value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.PermissionGet">
            <summary>Sets the shim of RolePermission.get_Permission()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.PermissionIDGet">
            <summary>Sets the shim of RolePermission.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.PermissionIDSetInt32">
            <summary>Sets the shim of RolePermission.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.PermissionSetPermission">
            <summary>Sets the shim of RolePermission.set_Permission(Permission value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RoleGet">
            <summary>Sets the shim of RolePermission.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RoleIDGet">
            <summary>Sets the shim of RolePermission.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RoleIDSetInt32">
            <summary>Sets the shim of RolePermission.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RolePermissionIDGet">
            <summary>Sets the shim of RolePermission.get_RolePermissionID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RolePermissionIDSetInt32">
            <summary>Sets the shim of RolePermission.set_RolePermissionID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimRolePermission.AllInstances.RoleSetRole">
            <summary>Sets the shim of RolePermission.set_Role(Role value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimState">
            <summary>Shim type of Contact.Core.DataAccess.State</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimState.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimState.#ctor(Contact.Core.DataAccess.State)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimState.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimState.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.Constructor">
            <summary>Sets the shim of State.State()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.EmployeeGet">
            <summary>Sets the shim of State.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.EmployeeSetEmployee">
            <summary>Sets the shim of State.set_Employee(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.NameGet">
            <summary>Sets the shim of State.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.NameSetString">
            <summary>Sets the shim of State.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.StateIDGet">
            <summary>Sets the shim of State.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.StateIDSetInt32">
            <summary>Sets the shim of State.set_StateID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimState.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.EmployeeGet">
            <summary>Sets the shim of State.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.EmployeeSetEmployee">
            <summary>Sets the shim of State.set_Employee(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.NameGet">
            <summary>Sets the shim of State.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.NameSetString">
            <summary>Sets the shim of State.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.StateIDGet">
            <summary>Sets the shim of State.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimState.AllInstances.StateIDSetInt32">
            <summary>Sets the shim of State.set_StateID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimUser">
            <summary>Shim type of Contact.Core.DataAccess.User</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUser.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUser.#ctor(Contact.Core.DataAccess.User)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUser.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUser.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.Constructor">
            <summary>Sets the shim of User.User()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.EmailGet">
            <summary>Sets the shim of User.get_Email()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.EmailSetString">
            <summary>Sets the shim of User.set_Email(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.EmployeeGet">
            <summary>Sets the shim of User.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.EmployeeSetEmployee">
            <summary>Sets the shim of User.set_Employee(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.PasswordGet">
            <summary>Sets the shim of User.get_Password()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.PasswordSetString">
            <summary>Sets the shim of User.set_Password(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UserIDGet">
            <summary>Sets the shim of User.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UserIDSetInt32">
            <summary>Sets the shim of User.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UserRolesGet">
            <summary>Sets the shim of User.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UserRolesSetICollectionOfUserRole">
            <summary>Sets the shim of User.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UsernameGet">
            <summary>Sets the shim of User.get_Username()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.UsernameSetString">
            <summary>Sets the shim of User.set_Username(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.EmailGet">
            <summary>Sets the shim of User.get_Email()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.EmailSetString">
            <summary>Sets the shim of User.set_Email(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.EmployeeGet">
            <summary>Sets the shim of User.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.EmployeeSetEmployee">
            <summary>Sets the shim of User.set_Employee(Employee value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.PasswordGet">
            <summary>Sets the shim of User.get_Password()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.PasswordSetString">
            <summary>Sets the shim of User.set_Password(String value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UserIDGet">
            <summary>Sets the shim of User.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of User.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UserRolesGet">
            <summary>Sets the shim of User.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UserRolesSetICollectionOfUserRole">
            <summary>Sets the shim of User.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UsernameGet">
            <summary>Sets the shim of User.get_Username()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUser.AllInstances.UsernameSetString">
            <summary>Sets the shim of User.set_Username(String value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimUserRole">
            <summary>Shim type of Contact.Core.DataAccess.UserRole</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUserRole.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUserRole.#ctor(Contact.Core.DataAccess.UserRole)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUserRole.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.ShimUserRole.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.Constructor">
            <summary>Sets the shim of UserRole.UserRole()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.RoleGet">
            <summary>Sets the shim of UserRole.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.RoleIDGet">
            <summary>Sets the shim of UserRole.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.RoleIDSetInt32">
            <summary>Sets the shim of UserRole.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.RoleSetRole">
            <summary>Sets the shim of UserRole.set_Role(Role value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserGet">
            <summary>Sets the shim of UserRole.get_User()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserIDGet">
            <summary>Sets the shim of UserRole.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserIDSetInt32">
            <summary>Sets the shim of UserRole.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserRoleIDGet">
            <summary>Sets the shim of UserRole.get_UserRoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserRoleIDSetInt32">
            <summary>Sets the shim of UserRole.set_UserRoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.UserSetUser">
            <summary>Sets the shim of UserRole.set_User(User value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.RoleGet">
            <summary>Sets the shim of UserRole.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.RoleIDGet">
            <summary>Sets the shim of UserRole.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.RoleIDSetInt32">
            <summary>Sets the shim of UserRole.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.RoleSetRole">
            <summary>Sets the shim of UserRole.set_Role(Role value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserGet">
            <summary>Sets the shim of UserRole.get_User()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserIDGet">
            <summary>Sets the shim of UserRole.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of UserRole.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserRoleIDGet">
            <summary>Sets the shim of UserRole.get_UserRoleID()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserRoleIDSetInt32">
            <summary>Sets the shim of UserRole.set_UserRoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.ShimUserRole.AllInstances.UserSetUser">
            <summary>Sets the shim of UserRole.set_User(User value)</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubBranch">
            <summary>Stub type of Contact.Core.DataAccess.Branch</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubBranch.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubBranch.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubBranch.Employees as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubBranch.EmployeesGet">
            <summary>Sets the stub of Branch.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubBranch.EmployeesSetICollectionOfEmployee">
            <summary>Sets the stub of Branch.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubBranch.InitializeStub">
            <summary>Initializes a new instance of type StubBranch</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubBranch.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubBranch.Employees">
            <summary>Sets the stub of Branch.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubBranch.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubBranch.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubContact">
            <summary>Stub type of Contact.Core.DataAccess.Contact</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubContact.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubContact.InitializeStub">
            <summary>Initializes a new instance of type StubContact</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubContact.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubContact.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubContact.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubCountry">
            <summary>Stub type of Contact.Core.DataAccess.Country</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubCountry.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubCountry.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubCountry.Employees as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubCountry.EmployeesGet">
            <summary>Sets the stub of Country.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubCountry.EmployeesSetICollectionOfEmployee">
            <summary>Sets the stub of Country.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubCountry.InitializeStub">
            <summary>Initializes a new instance of type StubCountry</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCountry.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCountry.Employees">
            <summary>Sets the stub of Country.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCountry.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCountry.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubCustomers1">
            <summary>Stub type of Contact.Core.DataAccess.Customers1</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubCustomers1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubCustomers1.InitializeStub">
            <summary>Initializes a new instance of type StubCustomers1</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCustomers1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCustomers1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubCustomers1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubDataEntities">
            <summary>Stub type of Contact.Core.DataAccess.DataEntities</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToBranches">
            <summary>Attaches delegates to emulate StubDataEntities.Branches as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToContacts">
            <summary>Attaches delegates to emulate StubDataEntities.Contacts as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToCountrys">
            <summary>Attaches delegates to emulate StubDataEntities.Countrys as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToCustomers1">
            <summary>Attaches delegates to emulate StubDataEntities.Customers1 as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToDepartments">
            <summary>Attaches delegates to emulate StubDataEntities.Departments as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubDataEntities.Employees as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToPermissions">
            <summary>Attaches delegates to emulate StubDataEntities.Permissions as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToRolePermissions">
            <summary>Attaches delegates to emulate StubDataEntities.RolePermissions as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToRoles">
            <summary>Attaches delegates to emulate StubDataEntities.Roles as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToStates">
            <summary>Attaches delegates to emulate StubDataEntities.States as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToUserRoles">
            <summary>Attaches delegates to emulate StubDataEntities.UserRoles as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.AttachBackingFieldToUsers">
            <summary>Attaches delegates to emulate StubDataEntities.Users as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.BranchesGet">
            <summary>Sets the stub of DataEntities.get_Branches()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.BranchesSetDbSetOfBranch">
            <summary>Sets the stub of DataEntities.set_Branches(DbSet`1&lt;Branch&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.ContactsGet">
            <summary>Sets the stub of DataEntities.get_Contacts()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.ContactsSetDbSetOfContact">
            <summary>Sets the stub of DataEntities.set_Contacts(DbSet`1&lt;Contact&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.CountrysGet">
            <summary>Sets the stub of DataEntities.get_Countrys()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.CountrysSetDbSetOfCountry">
            <summary>Sets the stub of DataEntities.set_Countrys(DbSet`1&lt;Country&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.Customers1Get">
            <summary>Sets the stub of DataEntities.get_Customers1()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.Customers1SetDbSetOfCustomers1">
            <summary>Sets the stub of DataEntities.set_Customers1(DbSet`1&lt;Customers1&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.DepartmentsGet">
            <summary>Sets the stub of DataEntities.get_Departments()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.DepartmentsSetDbSetOfDepartment">
            <summary>Sets the stub of DataEntities.set_Departments(DbSet`1&lt;Department&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.Dispose(System.Boolean)">
            <summary>Sets the stub of DbContext.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.DisposeBoolean">
            <summary>Sets the stub of DbContext.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.EmployeesGet">
            <summary>Sets the stub of DataEntities.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.EmployeesSetDbSetOfEmployee">
            <summary>Sets the stub of DataEntities.set_Employees(DbSet`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.Equals(System.Object)">
            <summary>Sets the stub of DbContext.Equals(Object obj)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.EqualsObject">
            <summary>Sets the stub of DbContext.Equals(Object obj)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.GetHashCode">
            <summary>Sets the stub of DbContext.GetHashCode()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.GetHashCode01">
            <summary>Sets the stub of DbContext.GetHashCode()</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.InitializeStub">
            <summary>Initializes a new instance of type StubDataEntities</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>Sets the stub of DataEntities.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.OnModelCreatingDbModelBuilder">
            <summary>Sets the stub of DataEntities.OnModelCreating(DbModelBuilder modelBuilder)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.PermissionsGet">
            <summary>Sets the stub of DataEntities.get_Permissions()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.PermissionsSetDbSetOfPermission">
            <summary>Sets the stub of DataEntities.set_Permissions(DbSet`1&lt;Permission&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.RolePermissionsGet">
            <summary>Sets the stub of DataEntities.get_RolePermissions()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.RolePermissionsSetDbSetOfRolePermission">
            <summary>Sets the stub of DataEntities.set_RolePermissions(DbSet`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.RolesGet">
            <summary>Sets the stub of DataEntities.get_Roles()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.RolesSetDbSetOfRole">
            <summary>Sets the stub of DataEntities.set_Roles(DbSet`1&lt;Role&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChanges">
            <summary>Sets the stub of DbContext.SaveChanges()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChanges01">
            <summary>Sets the stub of DbContext.SaveChanges()</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChangesAsync">
            <summary>Sets the stub of DbContext.SaveChangesAsync()</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>Sets the stub of DbContext.SaveChangesAsync(CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChangesAsync01">
            <summary>Sets the stub of DbContext.SaveChangesAsync()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.SaveChangesAsyncCancellationToken">
            <summary>Sets the stub of DbContext.SaveChangesAsync(CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>Sets the stub of DbContext.ShouldValidateEntity(DbEntityEntry entityEntry)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.ShouldValidateEntityDbEntityEntry">
            <summary>Sets the stub of DbContext.ShouldValidateEntity(DbEntityEntry entityEntry)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.StatesGet">
            <summary>Sets the stub of DataEntities.get_States()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.StatesSetDbSetOfState">
            <summary>Sets the stub of DataEntities.set_States(DbSet`1&lt;State&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.ToString">
            <summary>Sets the stub of DbContext.ToString()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.ToString01">
            <summary>Sets the stub of DbContext.ToString()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.UserRolesGet">
            <summary>Sets the stub of DataEntities.get_UserRoles()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.UserRolesSetDbSetOfUserRole">
            <summary>Sets the stub of DataEntities.set_UserRoles(DbSet`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.UsersGet">
            <summary>Sets the stub of DataEntities.get_Users()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.UsersSetDbSetOfUser">
            <summary>Sets the stub of DataEntities.set_Users(DbSet`1&lt;User&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataEntities.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>Sets the stub of DbContext.ValidateEntity(DbEntityEntry entityEntry, IDictionary`2&lt;Object,Object&gt; items)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDataEntities.ValidateEntityDbEntityEntryIDictionaryOfObjectObject">
            <summary>Sets the stub of DbContext.ValidateEntity(DbEntityEntry entityEntry, IDictionary`2&lt;Object,Object&gt; items)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Branches">
            <summary>Sets the stub of DataEntities.get_Branches()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Contacts">
            <summary>Sets the stub of DataEntities.get_Contacts()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Countrys">
            <summary>Sets the stub of DataEntities.get_Countrys()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Customers1">
            <summary>Sets the stub of DataEntities.get_Customers1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Departments">
            <summary>Sets the stub of DataEntities.get_Departments()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Employees">
            <summary>Sets the stub of DataEntities.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Permissions">
            <summary>Sets the stub of DataEntities.get_Permissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.RolePermissions">
            <summary>Sets the stub of DataEntities.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Roles">
            <summary>Sets the stub of DataEntities.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.States">
            <summary>Sets the stub of DataEntities.get_States()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.UserRoles">
            <summary>Sets the stub of DataEntities.get_UserRoles()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataEntities.Users">
            <summary>Sets the stub of DataEntities.get_Users()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubDataRepository">
            <summary>Stub type of Contact.Core.DataAccess.DataRepository</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataRepository.#ctor(Contact.Core.DataAccess.DataEntities)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDataRepository.InitializeStub">
            <summary>Initializes a new instance of type StubDataRepository</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataRepository.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataRepository.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDataRepository.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubDepartment">
            <summary>Stub type of Contact.Core.DataAccess.Department</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDepartment.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDepartment.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubDepartment.Employees as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDepartment.EmployeesGet">
            <summary>Sets the stub of Department.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubDepartment.EmployeesSetICollectionOfEmployee">
            <summary>Sets the stub of Department.set_Employees(ICollection`1&lt;Employee&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubDepartment.InitializeStub">
            <summary>Initializes a new instance of type StubDepartment</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDepartment.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDepartment.Employees">
            <summary>Sets the stub of Department.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDepartment.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubDepartment.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubEmployee">
            <summary>Stub type of Contact.Core.DataAccess.Employee</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToBranch">
            <summary>Attaches delegates to emulate StubEmployee.Branch as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToCountry">
            <summary>Attaches delegates to emulate StubEmployee.Country as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToDepartment">
            <summary>Attaches delegates to emulate StubEmployee.Department as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToEmployee1">
            <summary>Attaches delegates to emulate StubEmployee.Employee1 as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToEmployees1">
            <summary>Attaches delegates to emulate StubEmployee.Employees1 as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToState">
            <summary>Attaches delegates to emulate StubEmployee.State as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.AttachBackingFieldToUser">
            <summary>Attaches delegates to emulate StubEmployee.User as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.BranchGet">
            <summary>Sets the stub of Employee.get_Branch()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.BranchSetBranch">
            <summary>Sets the stub of Employee.set_Branch(Branch value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.CountryGet">
            <summary>Sets the stub of Employee.get_Country()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.CountrySetCountry">
            <summary>Sets the stub of Employee.set_Country(Country value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.DepartmentGet">
            <summary>Sets the stub of Employee.get_Department()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.DepartmentSetDepartment">
            <summary>Sets the stub of Employee.set_Department(Department value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.Employee1Get">
            <summary>Sets the stub of Employee.get_Employee1()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.Employee1SetEmployee">
            <summary>Sets the stub of Employee.set_Employee1(Employee value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.Employees1Get">
            <summary>Sets the stub of Employee.get_Employees1()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.Employees1SetEmployee">
            <summary>Sets the stub of Employee.set_Employees1(Employee value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubEmployee.InitializeStub">
            <summary>Initializes a new instance of type StubEmployee</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.StateGet">
            <summary>Sets the stub of Employee.get_State()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.StateSetState">
            <summary>Sets the stub of Employee.set_State(State value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.UserGet">
            <summary>Sets the stub of Employee.get_User()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubEmployee.UserSetUser">
            <summary>Sets the stub of Employee.set_User(User value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.Branch">
            <summary>Sets the stub of Employee.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.Country">
            <summary>Sets the stub of Employee.get_Country()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.Department">
            <summary>Sets the stub of Employee.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.Employee1">
            <summary>Sets the stub of Employee.get_Employee1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.Employees1">
            <summary>Sets the stub of Employee.get_Employees1()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.State">
            <summary>Sets the stub of Employee.get_State()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubEmployee.User">
            <summary>Sets the stub of Employee.get_User()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubPermission">
            <summary>Stub type of Contact.Core.DataAccess.Permission</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubPermission.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubPermission.AttachBackingFieldToRolePermissions">
            <summary>Attaches delegates to emulate StubPermission.RolePermissions as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubPermission.InitializeStub">
            <summary>Initializes a new instance of type StubPermission</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubPermission.RolePermissionsGet">
            <summary>Sets the stub of Permission.get_RolePermissions()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubPermission.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the stub of Permission.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubPermission.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubPermission.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubPermission.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubPermission.RolePermissions">
            <summary>Sets the stub of Permission.get_RolePermissions()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubRole">
            <summary>Stub type of Contact.Core.DataAccess.Role</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRole.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRole.AttachBackingFieldToRolePermissions">
            <summary>Attaches delegates to emulate StubRole.RolePermissions as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRole.AttachBackingFieldToUserRoles">
            <summary>Attaches delegates to emulate StubRole.UserRoles as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRole.InitializeStub">
            <summary>Initializes a new instance of type StubRole</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRole.RolePermissionsGet">
            <summary>Sets the stub of Role.get_RolePermissions()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRole.RolePermissionsSetICollectionOfRolePermission">
            <summary>Sets the stub of Role.set_RolePermissions(ICollection`1&lt;RolePermission&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRole.UserRolesGet">
            <summary>Sets the stub of Role.get_UserRoles()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRole.UserRolesSetICollectionOfUserRole">
            <summary>Sets the stub of Role.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRole.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRole.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRole.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRole.RolePermissions">
            <summary>Sets the stub of Role.get_RolePermissions()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRole.UserRoles">
            <summary>Sets the stub of Role.get_UserRoles()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubRolePermission">
            <summary>Stub type of Contact.Core.DataAccess.RolePermission</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRolePermission.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRolePermission.AttachBackingFieldToPermission">
            <summary>Attaches delegates to emulate StubRolePermission.Permission as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRolePermission.AttachBackingFieldToRole">
            <summary>Attaches delegates to emulate StubRolePermission.Role as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubRolePermission.InitializeStub">
            <summary>Initializes a new instance of type StubRolePermission</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRolePermission.PermissionGet">
            <summary>Sets the stub of RolePermission.get_Permission()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRolePermission.PermissionSetPermission">
            <summary>Sets the stub of RolePermission.set_Permission(Permission value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRolePermission.RoleGet">
            <summary>Sets the stub of RolePermission.get_Role()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubRolePermission.RoleSetRole">
            <summary>Sets the stub of RolePermission.set_Role(Role value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRolePermission.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRolePermission.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRolePermission.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRolePermission.Permission">
            <summary>Sets the stub of RolePermission.get_Permission()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubRolePermission.Role">
            <summary>Sets the stub of RolePermission.get_Role()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubState">
            <summary>Stub type of Contact.Core.DataAccess.State</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubState.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubState.AttachBackingFieldToEmployee">
            <summary>Attaches delegates to emulate StubState.Employee as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubState.EmployeeGet">
            <summary>Sets the stub of State.get_Employee()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubState.EmployeeSetEmployee">
            <summary>Sets the stub of State.set_Employee(Employee value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubState.InitializeStub">
            <summary>Initializes a new instance of type StubState</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubState.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubState.Employee">
            <summary>Sets the stub of State.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubState.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubState.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubUser">
            <summary>Stub type of Contact.Core.DataAccess.User</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUser.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUser.AttachBackingFieldToEmployee">
            <summary>Attaches delegates to emulate StubUser.Employee as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUser.AttachBackingFieldToUserRoles">
            <summary>Attaches delegates to emulate StubUser.UserRoles as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUser.EmployeeGet">
            <summary>Sets the stub of User.get_Employee()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUser.EmployeeSetEmployee">
            <summary>Sets the stub of User.set_Employee(Employee value)</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUser.InitializeStub">
            <summary>Initializes a new instance of type StubUser</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUser.UserRolesGet">
            <summary>Sets the stub of User.get_UserRoles()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUser.UserRolesSetICollectionOfUserRole">
            <summary>Sets the stub of User.set_UserRoles(ICollection`1&lt;UserRole&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUser.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUser.Employee">
            <summary>Sets the stub of User.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUser.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUser.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUser.UserRoles">
            <summary>Sets the stub of User.get_UserRoles()</summary>
        </member>
        <member name="T:Contact.Core.DataAccess.Fakes.StubUserRole">
            <summary>Stub type of Contact.Core.DataAccess.UserRole</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUserRole.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUserRole.AttachBackingFieldToRole">
            <summary>Attaches delegates to emulate StubUserRole.Role as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUserRole.AttachBackingFieldToUser">
            <summary>Attaches delegates to emulate StubUserRole.User as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.DataAccess.Fakes.StubUserRole.InitializeStub">
            <summary>Initializes a new instance of type StubUserRole</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUserRole.RoleGet">
            <summary>Sets the stub of UserRole.get_Role()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUserRole.RoleSetRole">
            <summary>Sets the stub of UserRole.set_Role(Role value)</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUserRole.UserGet">
            <summary>Sets the stub of UserRole.get_User()</summary>
        </member>
        <member name="F:Contact.Core.DataAccess.Fakes.StubUserRole.UserSetUser">
            <summary>Sets the stub of UserRole.set_User(User value)</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUserRole.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUserRole.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUserRole.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUserRole.Role">
            <summary>Sets the stub of UserRole.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.DataAccess.Fakes.StubUserRole.User">
            <summary>Sets the stub of UserRole.get_User()</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.Fakes.StubIDataRepository">
            <summary>Stub type of Contact.Core.Interfaces.IDataRepository</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.#ctor">
            <summary>Initializes a new instance of type StubIDataRepository</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Add(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Add``1(``0)">
            <summary>Sets the stub of IDataRepository.Add(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Delete``1(``0)">
            <summary>Sets the stub of IDataRepository.Delete(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Execute(System.String)">
            <summary>Sets the stub of IDataRepository.Execute(String sql)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Execute``1(System.String)">
            <summary>Sets the stub of IDataRepository.Execute(String sql)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Execute``1(System.String,System.Object)">
            <summary>Sets the stub of IDataRepository.Execute(String name, Object args)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Execute(System.String,System.Object)">
            <summary>Sets the stub of IDataRepository.Execute(String sql, Object args)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#Get``1">
            <summary>Sets the stub of IDataRepository.Get()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#GetByID``1(System.Int32)">
            <summary>Sets the stub of IDataRepository.GetByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.cc::Contact#Core#Interfaces#IDataRepository#SaveChanges">
            <summary>Sets the stub of IDataRepository.SaveChanges()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.DeleteOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Delete(!!0 item)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.ExecuteOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of Execute(String sql)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.ExecuteOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of Execute(String name, Object args)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.Fakes.StubIDataRepository.ExecuteString">
            <summary>Sets the stub of IDataRepository.Execute(String sql)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.Fakes.StubIDataRepository.ExecuteStringObject">
            <summary>Sets the stub of IDataRepository.Execute(String sql, Object args)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.GetByIDOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>Sets stubs of GetByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.Fakes.StubIDataRepository.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0}})">
            <summary>Sets stubs of Get()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.Fakes.StubIDataRepository.SaveChanges">
            <summary>Sets the stub of IDataRepository.SaveChanges()</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IBranchManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.#ctor">
            <summary>Initializes a new instance of type StubIBranchManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.cc::Contact#Core#Interfaces#IManagers#IBranchManager#CreateBranch(Contact.Core.Models.BranchModel)">
            <summary>Sets the stub of IBranchManager.CreateBranch(BranchModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.cc::Contact#Core#Interfaces#IManagers#IBranchManager#EditBranch(System.Int32,Contact.Core.Models.BranchModel)">
            <summary>Sets the stub of IBranchManager.EditBranch(Int32 id, BranchModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.cc::Contact#Core#Interfaces#IManagers#IBranchManager#GetByNameAndPhone(System.String,System.String)">
            <summary>Sets the stub of IBranchManager.GetByNameAndPhone(String name, String number)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.cc::Contact#Core#Interfaces#IManagers#IBranchManager#GetListOfBranch">
            <summary>Sets the stub of IBranchManager.GetListOfBranch()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.CreateBranchBranchModel">
            <summary>Sets the stub of IBranchManager.CreateBranch(BranchModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.EditBranchInt32BranchModel">
            <summary>Sets the stub of IBranchManager.EditBranch(Int32 id, BranchModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.GetByNameAndPhoneStringString">
            <summary>Sets the stub of IBranchManager.GetByNameAndPhone(String name, String number)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIBranchManager.GetListOfBranch">
            <summary>Sets the stub of IBranchManager.GetListOfBranch()</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IContactManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.#ctor">
            <summary>Initializes a new instance of type StubIContactManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.cc::Contact#Core#Interfaces#IManagers#IContactManager#CreateContactAsync(Contact.Core.Models.ContactModel)">
            <summary>Sets the stub of IContactManager.CreateContactAsync(ContactModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.cc::Contact#Core#Interfaces#IManagers#IContactManager#DeleteContact(System.Int32)">
            <summary>Sets the stub of IContactManager.DeleteContact(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.cc::Contact#Core#Interfaces#IManagers#IContactManager#EditContactAsync(Contact.Core.Models.ContactModel)">
            <summary>Sets the stub of IContactManager.EditContactAsync(ContactModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.cc::Contact#Core#Interfaces#IManagers#IContactManager#GetAllContact">
            <summary>Sets the stub of IContactManager.GetAllContact()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.cc::Contact#Core#Interfaces#IManagers#IContactManager#GetContactByID(System.Int32)">
            <summary>Sets the stub of IContactManager.GetContactByID(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.CreateContactAsyncContactModel">
            <summary>Sets the stub of IContactManager.CreateContactAsync(ContactModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.DeleteContactInt32">
            <summary>Sets the stub of IContactManager.DeleteContact(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.EditContactAsyncContactModel">
            <summary>Sets the stub of IContactManager.EditContactAsync(ContactModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.GetAllContact">
            <summary>Sets the stub of IContactManager.GetAllContact()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIContactManager.GetContactByIDInt32">
            <summary>Sets the stub of IContactManager.GetContactByID(Int32 id)</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IDepartmentManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.#ctor">
            <summary>Initializes a new instance of type StubIDepartmentManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#CreateDepartment(Contact.Core.Models.DepartmentModel)">
            <summary>Sets the stub of IDepartmentManager.CreateDepartment(DepartmentModel dept)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#Delete(System.Int32)">
            <summary>Sets the stub of IDepartmentManager.Delete(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#Edit(System.Int32,Contact.Core.Models.DepartmentModel)">
            <summary>Sets the stub of IDepartmentManager.Edit(Int32 id, DepartmentModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#GetAllDepartment">
            <summary>Sets the stub of IDepartmentManager.GetAllDepartment()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#GetDepartments">
            <summary>Sets the stub of IDepartmentManager.GetDepartments()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#GetDept">
            <summary>Sets the stub of IDepartmentManager.GetDept()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.cc::Contact#Core#Interfaces#IManagers#IDepartmentManager#GetDeptByID(System.Int32)">
            <summary>Sets the stub of IDepartmentManager.GetDeptByID(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.CreateDepartmentDepartmentModel">
            <summary>Sets the stub of IDepartmentManager.CreateDepartment(DepartmentModel dept)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.DeleteInt32">
            <summary>Sets the stub of IDepartmentManager.Delete(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.EditInt32DepartmentModel">
            <summary>Sets the stub of IDepartmentManager.Edit(Int32 id, DepartmentModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.GetAllDepartment">
            <summary>Sets the stub of IDepartmentManager.GetAllDepartment()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.GetDepartments">
            <summary>Sets the stub of IDepartmentManager.GetDepartments()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.GetDept">
            <summary>Sets the stub of IDepartmentManager.GetDept()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIDepartmentManager.GetDeptByIDInt32">
            <summary>Sets the stub of IDepartmentManager.GetDeptByID(Int32 id)</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IEmployeeManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.#ctor">
            <summary>Initializes a new instance of type StubIEmployeeManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.cc::Contact#Core#Interfaces#IManagers#IEmployeeManager#GetAllEmployee">
            <summary>Sets the stub of IEmployeeManager.GetAllEmployee()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.cc::Contact#Core#Interfaces#IManagers#IEmployeeManager#GetEmployeeByID(System.Int32)">
            <summary>Sets the stub of IEmployeeManager.GetEmployeeByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.cc::Contact#Core#Interfaces#IManagers#IEmployeeManager#GetEmployeeByName(System.String)">
            <summary>Sets the stub of IEmployeeManager.GetEmployeeByName(String name)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.cc::Contact#Core#Interfaces#IManagers#IEmployeeManager#createEmployee(Contact.Core.Models.EmployeeModel,System.Byte[])">
            <summary>Sets the stub of IEmployeeManager.createEmployee(EmployeeModel model, Byte[] data)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.CreateEmployeeEmployeeModelByteArray">
            <summary>Sets the stub of IEmployeeManager.createEmployee(EmployeeModel model, Byte[] data)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.GetAllEmployee">
            <summary>Sets the stub of IEmployeeManager.GetAllEmployee()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.GetEmployeeByIDInt32">
            <summary>Sets the stub of IEmployeeManager.GetEmployeeByID(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIEmployeeManager.GetEmployeeByNameString">
            <summary>Sets the stub of IEmployeeManager.GetEmployeeByName(String name)</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.#ctor">
            <summary>Initializes a new instance of type StubIManager</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.BranchGet">
            <summary>Sets the stub of IManager.get_Branch()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.ContactGet">
            <summary>Sets the stub of IManager.get_Contact()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.DeptGet">
            <summary>Sets the stub of IManager.get_Dept()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.EmpGet">
            <summary>Sets the stub of IManager.get_Emp()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.RoleGet">
            <summary>Sets the stub of IManager.get_Role()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.UserGet">
            <summary>Sets the stub of IManager.get_User()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#Branch">
            <summary>Sets the stub of IManager.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#Contact">
            <summary>Sets the stub of IManager.get_Contact()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#Dept">
            <summary>Sets the stub of IManager.get_Dept()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#Emp">
            <summary>Sets the stub of IManager.get_Emp()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#Role">
            <summary>Sets the stub of IManager.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.Interfaces.IManagers.Fakes.StubIManager.cc::Contact#Core#Interfaces#IManagers#IManager#User">
            <summary>Sets the stub of IManager.get_User()</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IRoleManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.#ctor">
            <summary>Initializes a new instance of type StubIRoleManager</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.AssignRoleToUserInt32Int32">
            <summary>Sets the stub of IRoleManager.AssignRoleToUser(Int32 user, Int32 role)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#AssignRoleToUser(System.Int32,System.Int32)">
            <summary>Sets the stub of IRoleManager.AssignRoleToUser(Int32 user, Int32 role)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#CreateRole(Contact.Core.Models.RoleModel)">
            <summary>Sets the stub of IRoleManager.CreateRole(RoleModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#Delete(System.Int32)">
            <summary>Sets the stub of IRoleManager.Delete(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#EditRole(System.Int32,Contact.Core.Models.RoleModel)">
            <summary>Sets the stub of IRoleManager.EditRole(Int32 id, RoleModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#GetAllRole">
            <summary>Sets the stub of IRoleManager.GetAllRole()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#GetRoleByID(System.Int32)">
            <summary>Sets the stub of IRoleManager.GetRoleByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#GetRoleByName(System.String)">
            <summary>Sets the stub of IRoleManager.GetRoleByName(String roleName)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#GetRoleForUser(System.String)">
            <summary>Sets the stub of IRoleManager.GetRoleForUser(String email)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#GetUserRoles(System.String)">
            <summary>Sets the stub of IRoleManager.GetUserRoles(String username)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.cc::Contact#Core#Interfaces#IManagers#IRoleManager#IsUserInRole(System.String,System.String)">
            <summary>Sets the stub of IRoleManager.IsUserInRole(String email, String roleName)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.CreateRoleRoleModel">
            <summary>Sets the stub of IRoleManager.CreateRole(RoleModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.DeleteInt32">
            <summary>Sets the stub of IRoleManager.Delete(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.EditRoleInt32RoleModel">
            <summary>Sets the stub of IRoleManager.EditRole(Int32 id, RoleModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.GetAllRole">
            <summary>Sets the stub of IRoleManager.GetAllRole()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.GetRoleByIDInt32">
            <summary>Sets the stub of IRoleManager.GetRoleByID(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.GetRoleByNameString">
            <summary>Sets the stub of IRoleManager.GetRoleByName(String roleName)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.GetRoleForUserString">
            <summary>Sets the stub of IRoleManager.GetRoleForUser(String email)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.GetUserRolesString">
            <summary>Sets the stub of IRoleManager.GetUserRoles(String username)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIRoleManager.IsUserInRoleStringString">
            <summary>Sets the stub of IRoleManager.IsUserInRole(String email, String roleName)</summary>
        </member>
        <member name="T:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager">
            <summary>Stub type of Contact.Core.Interfaces.IManagers.IUserManager</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.#ctor">
            <summary>Initializes a new instance of type StubIUserManager</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.ChangePasswordInt32StringString">
            <summary>Sets the stub of IUserManager.ChangePassword(Int32 userID, String oldPassword, String newpassword)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#ChangePassword(System.Int32,System.String,System.String)">
            <summary>Sets the stub of IUserManager.ChangePassword(Int32 userID, String oldPassword, String newpassword)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#CreateUser(Contact.Core.Models.UserModel)">
            <summary>Sets the stub of IUserManager.CreateUser(UserModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#DeleteUser(System.Int32)">
            <summary>Sets the stub of IUserManager.DeleteUser(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#EdithUser(System.Int32)">
            <summary>Sets the stub of IUserManager.EdithUser(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#GetAllUsers">
            <summary>Sets the stub of IUserManager.GetAllUsers()</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#GetUser(System.String)">
            <summary>Sets the stub of IUserManager.GetUser(String username)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#GetUserByID(System.Int32)">
            <summary>Sets the stub of IUserManager.GetUserByID(Int32 id)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#Validate(Contact.Core.Models.UserModel)">
            <summary>Sets the stub of IUserManager.Validate(UserModel model)</summary>
        </member>
        <member name="M:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.cc::Contact#Core#Interfaces#IManagers#IUserManager#updateUser(Contact.Core.Models.UserModel)">
            <summary>Sets the stub of IUserManager.updateUser(UserModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.CreateUserUserModel">
            <summary>Sets the stub of IUserManager.CreateUser(UserModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.DeleteUserInt32">
            <summary>Sets the stub of IUserManager.DeleteUser(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.EdithUserInt32">
            <summary>Sets the stub of IUserManager.EdithUser(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.GetAllUsers">
            <summary>Sets the stub of IUserManager.GetAllUsers()</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.GetUserByIDInt32">
            <summary>Sets the stub of IUserManager.GetUserByID(Int32 id)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.GetUserString">
            <summary>Sets the stub of IUserManager.GetUser(String username)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.UpdateUserUserModel">
            <summary>Sets the stub of IUserManager.updateUser(UserModel model)</summary>
        </member>
        <member name="F:Contact.Core.Interfaces.IManagers.Fakes.StubIUserManager.ValidateUserModel">
            <summary>Sets the stub of IUserManager.Validate(UserModel model)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimBranchManager">
            <summary>Shim type of Contact.Core.Managers.BranchManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimBranchManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimBranchManager.#ctor(Contact.Core.Managers.BranchManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimBranchManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimBranchManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimBranchManager.Bind(Contact.Core.Interfaces.IManagers.IBranchManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.ConstructorDataRepository">
            <summary>Sets the shim of BranchManager.BranchManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.CreateBranchBranchModel">
            <summary>Sets the shim of BranchManager.CreateBranch(BranchModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.EditBranchInt32BranchModel">
            <summary>Sets the shim of BranchManager.EditBranch(Int32 id, BranchModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.GetByIDInt32">
            <summary>Sets the shim of BranchManager.GetByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.GetByNameAndPhoneStringString">
            <summary>Sets the shim of BranchManager.GetByNameAndPhone(String name, String number)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.GetListOfBranch">
            <summary>Sets the shim of BranchManager.GetListOfBranch()</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances.CreateBranchBranchModel">
            <summary>Sets the shim of BranchManager.CreateBranch(BranchModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances.EditBranchInt32BranchModel">
            <summary>Sets the shim of BranchManager.EditBranch(Int32 id, BranchModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances.GetByIDInt32">
            <summary>Sets the shim of BranchManager.GetByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances.GetByNameAndPhoneStringString">
            <summary>Sets the shim of BranchManager.GetByNameAndPhone(String name, String number)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimBranchManager.AllInstances.GetListOfBranch">
            <summary>Sets the shim of BranchManager.GetListOfBranch()</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimContactManager">
            <summary>Shim type of Contact.Core.Managers.ContactManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimContactManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimContactManager.#ctor(Contact.Core.Managers.ContactManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimContactManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimContactManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimContactManager.Bind(Contact.Core.Interfaces.IManagers.IContactManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.ConstructorDataRepository">
            <summary>Sets the shim of ContactManager.ContactManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.CreateContactAsyncContactModel">
            <summary>Sets the shim of ContactManager.CreateContactAsync(ContactModel contact)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.DeleteContactInt32">
            <summary>Sets the shim of ContactManager.DeleteContact(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.EditContactAsyncContactModel">
            <summary>Sets the shim of ContactManager.EditContactAsync(ContactModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.GetAllContact">
            <summary>Sets the shim of ContactManager.GetAllContact()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.GetContactByIDInt32">
            <summary>Sets the shim of ContactManager.GetContactByID(Int32 id)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances.CreateContactAsyncContactModel">
            <summary>Sets the shim of ContactManager.CreateContactAsync(ContactModel contact)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances.DeleteContactInt32">
            <summary>Sets the shim of ContactManager.DeleteContact(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances.EditContactAsyncContactModel">
            <summary>Sets the shim of ContactManager.EditContactAsync(ContactModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances.GetAllContact">
            <summary>Sets the shim of ContactManager.GetAllContact()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimContactManager.AllInstances.GetContactByIDInt32">
            <summary>Sets the shim of ContactManager.GetContactByID(Int32 id)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimDepartmentManager">
            <summary>Shim type of Contact.Core.Managers.DepartmentManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimDepartmentManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimDepartmentManager.#ctor(Contact.Core.Managers.DepartmentManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimDepartmentManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimDepartmentManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimDepartmentManager.Bind(Contact.Core.Interfaces.IManagers.IDepartmentManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.ConstructorDataRepository">
            <summary>Sets the shim of DepartmentManager.DepartmentManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.CreateDepartmentDepartmentModel">
            <summary>Sets the shim of DepartmentManager.CreateDepartment(DepartmentModel dept)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.DeleteInt32">
            <summary>Sets the shim of DepartmentManager.Delete(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.EditInt32DepartmentModel">
            <summary>Sets the shim of DepartmentManager.Edit(Int32 id, DepartmentModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.GetAllDepartment">
            <summary>Sets the shim of DepartmentManager.GetAllDepartment()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.GetDepartments">
            <summary>Sets the shim of DepartmentManager.GetDepartments()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.GetDept">
            <summary>Sets the shim of DepartmentManager.GetDept()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.GetDeptByIDInt32">
            <summary>Sets the shim of DepartmentManager.GetDeptByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager._GetDepartmentsb__4Department">
            <summary>Sets the shim of DepartmentManager.&lt;GetDepartments&gt;b__4(Department s)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.CreateDepartmentDepartmentModel">
            <summary>Sets the shim of DepartmentManager.CreateDepartment(DepartmentModel dept)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.DeleteInt32">
            <summary>Sets the shim of DepartmentManager.Delete(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.EditInt32DepartmentModel">
            <summary>Sets the shim of DepartmentManager.Edit(Int32 id, DepartmentModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.GetAllDepartment">
            <summary>Sets the shim of DepartmentManager.GetAllDepartment()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.GetDepartments">
            <summary>Sets the shim of DepartmentManager.GetDepartments()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.GetDept">
            <summary>Sets the shim of DepartmentManager.GetDept()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimDepartmentManager.AllInstances.GetDeptByIDInt32">
            <summary>Sets the shim of DepartmentManager.GetDeptByID(Int32 id)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimEmployeeManager">
            <summary>Shim type of Contact.Core.Managers.EmployeeManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimEmployeeManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimEmployeeManager.#ctor(Contact.Core.Managers.EmployeeManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimEmployeeManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimEmployeeManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimEmployeeManager.Bind(Contact.Core.Interfaces.IManagers.IEmployeeManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.ConstructorDataRepository">
            <summary>Sets the shim of EmployeeManager.EmployeeManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.GetAllEmployee">
            <summary>Sets the shim of EmployeeManager.GetAllEmployee()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.GetEmployeeByIDInt32">
            <summary>Sets the shim of EmployeeManager.GetEmployeeByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.GetEmployeeByNameString">
            <summary>Sets the shim of EmployeeManager.GetEmployeeByName(String name)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.createEmployeeEmployeeModelByteArray">
            <summary>Sets the shim of EmployeeManager.createEmployee(EmployeeModel model, Byte[] data)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimEmployeeManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.AllInstances.GetAllEmployee">
            <summary>Sets the shim of EmployeeManager.GetAllEmployee()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.AllInstances.GetEmployeeByIDInt32">
            <summary>Sets the shim of EmployeeManager.GetEmployeeByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.AllInstances.GetEmployeeByNameString">
            <summary>Sets the shim of EmployeeManager.GetEmployeeByName(String name)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimEmployeeManager.AllInstances.createEmployeeEmployeeModelByteArray">
            <summary>Sets the shim of EmployeeManager.createEmployee(EmployeeModel model, Byte[] data)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimManager">
            <summary>Shim type of Contact.Core.Managers.Manager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimManager.#ctor(Contact.Core.Managers.Manager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimManager.Bind(Contact.Core.Interfaces.IManagers.IManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.BranchGet">
            <summary>Sets the shim of Manager.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.BranchSetIBranchManager">
            <summary>Sets the shim of Manager.set_Branch(IBranchManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.ConstructorIUserManagerIRoleManagerIDepartmentManagerIEmployeeManagerIContactManagerIBranchManager">
            <summary>Sets the shim of Manager.Manager(IUserManager user, IRoleManager role, IDepartmentManager dept, IEmployeeManager emp, IContactManager contact, IBranchManager branch)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.ContactGet">
            <summary>Sets the shim of Manager.get_Contact()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.ContactSetIContactManager">
            <summary>Sets the shim of Manager.set_Contact(IContactManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.DeptGet">
            <summary>Sets the shim of Manager.get_Dept()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.DeptSetIDepartmentManager">
            <summary>Sets the shim of Manager.set_Dept(IDepartmentManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.EmpGet">
            <summary>Sets the shim of Manager.get_Emp()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.EmpSetIEmployeeManager">
            <summary>Sets the shim of Manager.set_Emp(IEmployeeManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.RoleGet">
            <summary>Sets the shim of Manager.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.RoleSetIRoleManager">
            <summary>Sets the shim of Manager.set_Role(IRoleManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.UserGet">
            <summary>Sets the shim of Manager.get_User()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.UserSetIUserManager">
            <summary>Sets the shim of Manager.set_User(IUserManager value)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.BranchGet">
            <summary>Sets the shim of Manager.get_Branch()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.BranchSetIBranchManager">
            <summary>Sets the shim of Manager.set_Branch(IBranchManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.ContactGet">
            <summary>Sets the shim of Manager.get_Contact()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.ContactSetIContactManager">
            <summary>Sets the shim of Manager.set_Contact(IContactManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.DeptGet">
            <summary>Sets the shim of Manager.get_Dept()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.DeptSetIDepartmentManager">
            <summary>Sets the shim of Manager.set_Dept(IDepartmentManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.EmpGet">
            <summary>Sets the shim of Manager.get_Emp()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.EmpSetIEmployeeManager">
            <summary>Sets the shim of Manager.set_Emp(IEmployeeManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.RoleGet">
            <summary>Sets the shim of Manager.get_Role()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.RoleSetIRoleManager">
            <summary>Sets the shim of Manager.set_Role(IRoleManager value)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.UserGet">
            <summary>Sets the shim of Manager.get_User()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimManager.AllInstances.UserSetIUserManager">
            <summary>Sets the shim of Manager.set_User(IUserManager value)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimRoleManager">
            <summary>Shim type of Contact.Core.Managers.RoleManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimRoleManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimRoleManager.#ctor(Contact.Core.Managers.RoleManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimRoleManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimRoleManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimRoleManager.Bind(Contact.Core.Interfaces.IManagers.IRoleManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AssignRoleToUserInt32Int32">
            <summary>Sets the shim of RoleManager.AssignRoleToUser(Int32 userID, Int32 roleID)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.ConstructorDataRepository">
            <summary>Sets the shim of RoleManager.RoleManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.CreateRoleRoleModel">
            <summary>Sets the shim of RoleManager.CreateRole(RoleModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.DeleteInt32">
            <summary>Sets the shim of RoleManager.Delete(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.EditRoleInt32RoleModel">
            <summary>Sets the shim of RoleManager.EditRole(Int32 id, RoleModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.GetAllRole">
            <summary>Sets the shim of RoleManager.GetAllRole()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.GetRoleByIDInt32">
            <summary>Sets the shim of RoleManager.GetRoleByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.GetRoleByNameString">
            <summary>Sets the shim of RoleManager.GetRoleByName(String roleName)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.GetRoleForUserString">
            <summary>Sets the shim of RoleManager.GetRoleForUser(String email)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.GetUserRolesString">
            <summary>Sets the shim of RoleManager.GetUserRoles(String username)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.IsUserInRoleStringString">
            <summary>Sets the shim of RoleManager.IsUserInRole(String email, String roleName)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager._GetRoleForUserb__16UserRole">
            <summary>Sets the shim of RoleManager.&lt;GetRoleForUser&gt;b__16(UserRole u)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager._GetRoleForUserb__17Role">
            <summary>Sets the shim of RoleManager.&lt;GetRoleForUser&gt;b__17(Role u)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager._GetUserRolesb__1Permission">
            <summary>Sets the shim of RoleManager.&lt;GetUserRoles&gt;b__1(Permission p)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager._IsUserInRoleb__cUserRole">
            <summary>Sets the shim of RoleManager.&lt;IsUserInRole&gt;b__c(UserRole ur)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.AssignRoleToUserInt32Int32">
            <summary>Sets the shim of RoleManager.AssignRoleToUser(Int32 userID, Int32 roleID)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.CreateRoleRoleModel">
            <summary>Sets the shim of RoleManager.CreateRole(RoleModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.DeleteInt32">
            <summary>Sets the shim of RoleManager.Delete(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.EditRoleInt32RoleModel">
            <summary>Sets the shim of RoleManager.EditRole(Int32 id, RoleModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.GetAllRole">
            <summary>Sets the shim of RoleManager.GetAllRole()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.GetRoleByIDInt32">
            <summary>Sets the shim of RoleManager.GetRoleByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.GetRoleByNameString">
            <summary>Sets the shim of RoleManager.GetRoleByName(String roleName)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.GetRoleForUserString">
            <summary>Sets the shim of RoleManager.GetRoleForUser(String email)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.GetUserRolesString">
            <summary>Sets the shim of RoleManager.GetUserRoles(String username)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances.IsUserInRoleStringString">
            <summary>Sets the shim of RoleManager.IsUserInRole(String email, String roleName)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimRoleManager.AllInstances._IsUserInRoleb__cUserRole">
            <summary>Sets the shim of RoleManager.&lt;IsUserInRole&gt;b__c(UserRole ur)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimUserManager">
            <summary>Shim type of Contact.Core.Managers.UserManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimUserManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimUserManager.#ctor(Contact.Core.Managers.UserManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimUserManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimUserManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.ShimUserManager.Bind(Contact.Core.Interfaces.IManagers.IUserManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.ChangePasswordInt32StringString">
            <summary>Sets the shim of UserManager.ChangePassword(Int32 userID, String oldPassword, String newpassword)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.ConstructorDataRepository">
            <summary>Sets the shim of UserManager.UserManager(DataRepository db)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.CreateUserUserModel">
            <summary>Sets the shim of UserManager.CreateUser(UserModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.DeleteUserInt32">
            <summary>Sets the shim of UserManager.DeleteUser(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.EdithUserInt32">
            <summary>Sets the shim of UserManager.EdithUser(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.GetAllUsers">
            <summary>Sets the shim of UserManager.GetAllUsers()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.GetUserByIDInt32">
            <summary>Sets the shim of UserManager.GetUserByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.GetUserString">
            <summary>Sets the shim of UserManager.GetUser(String username)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.ValidateUserModel">
            <summary>Sets the shim of UserManager.Validate(UserModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.updateUserUserModel">
            <summary>Sets the shim of UserManager.updateUser(UserModel model)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.ChangePasswordInt32StringString">
            <summary>Sets the shim of UserManager.ChangePassword(Int32 userID, String oldPassword, String newpassword)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.CreateUserUserModel">
            <summary>Sets the shim of UserManager.CreateUser(UserModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.DeleteUserInt32">
            <summary>Sets the shim of UserManager.DeleteUser(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.EdithUserInt32">
            <summary>Sets the shim of UserManager.EdithUser(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.GetAllUsers">
            <summary>Sets the shim of UserManager.GetAllUsers()</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.GetUserByIDInt32">
            <summary>Sets the shim of UserManager.GetUserByID(Int32 id)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.GetUserString">
            <summary>Sets the shim of UserManager.GetUser(String username)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.ValidateUserModel">
            <summary>Sets the shim of UserManager.Validate(UserModel model)</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.ShimUserManager.AllInstances.updateUserUserModel">
            <summary>Sets the shim of UserManager.updateUser(UserModel model)</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubBranchManager">
            <summary>Stub type of Contact.Core.Managers.BranchManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubBranchManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubBranchManager.InitializeStub">
            <summary>Initializes a new instance of type StubBranchManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubBranchManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubBranchManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubBranchManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubContactManager">
            <summary>Stub type of Contact.Core.Managers.ContactManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubContactManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubContactManager.InitializeStub">
            <summary>Initializes a new instance of type StubContactManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubContactManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubContactManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubContactManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubDepartmentManager">
            <summary>Stub type of Contact.Core.Managers.DepartmentManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubDepartmentManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubDepartmentManager.InitializeStub">
            <summary>Initializes a new instance of type StubDepartmentManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubDepartmentManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubDepartmentManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubDepartmentManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubEmployeeManager">
            <summary>Stub type of Contact.Core.Managers.EmployeeManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubEmployeeManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubEmployeeManager.InitializeStub">
            <summary>Initializes a new instance of type StubEmployeeManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubEmployeeManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubEmployeeManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubEmployeeManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubManager">
            <summary>Stub type of Contact.Core.Managers.Manager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubManager.#ctor(Contact.Core.Interfaces.IManagers.IUserManager,Contact.Core.Interfaces.IManagers.IRoleManager,Contact.Core.Interfaces.IManagers.IDepartmentManager,Contact.Core.Interfaces.IManagers.IEmployeeManager,Contact.Core.Interfaces.IManagers.IContactManager,Contact.Core.Interfaces.IManagers.IBranchManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubManager.InitializeStub">
            <summary>Initializes a new instance of type StubManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubRoleManager">
            <summary>Stub type of Contact.Core.Managers.RoleManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubRoleManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubRoleManager.InitializeStub">
            <summary>Initializes a new instance of type StubRoleManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubRoleManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubRoleManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubRoleManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Managers.Fakes.StubUserManager">
            <summary>Stub type of Contact.Core.Managers.UserManager</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubUserManager.#ctor(Contact.Core.DataAccess.DataRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Managers.Fakes.StubUserManager.InitializeStub">
            <summary>Initializes a new instance of type StubUserManager</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubUserManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubUserManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Managers.Fakes.StubUserManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimBranchModel">
            <summary>Shim type of Contact.Core.Models.BranchModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimBranchModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimBranchModel.#ctor(Contact.Core.Models.BranchModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimBranchModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimBranchModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimBranchModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.BranchAddressGet">
            <summary>Sets the shim of BranchModel.get_BranchAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.BranchAddressSetString">
            <summary>Sets the shim of BranchModel.set_BranchAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.BranchNameGet">
            <summary>Sets the shim of BranchModel.get_BranchName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.BranchNameSetString">
            <summary>Sets the shim of BranchModel.set_BranchName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.Constructor">
            <summary>Sets the shim of BranchModel.BranchModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.ConstructorBranch">
            <summary>Sets the shim of BranchModel.BranchModel(Branch model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.EmailAddressGet">
            <summary>Sets the shim of BranchModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.EmailAddressSetString">
            <summary>Sets the shim of BranchModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.EmployeesGet">
            <summary>Sets the shim of BranchModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.EmployeesSetIListOfEmployeeModel">
            <summary>Sets the shim of BranchModel.set_Employees(IList`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.MapBranch">
            <summary>Sets the shim of BranchModel.Map(Branch model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.PhoneNumberGet">
            <summary>Sets the shim of BranchModel.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.PhoneNumberSetString">
            <summary>Sets the shim of BranchModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.BranchAddressGet">
            <summary>Sets the shim of BranchModel.get_BranchAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.BranchAddressSetString">
            <summary>Sets the shim of BranchModel.set_BranchAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.BranchNameGet">
            <summary>Sets the shim of BranchModel.get_BranchName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.BranchNameSetString">
            <summary>Sets the shim of BranchModel.set_BranchName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.EmailAddressGet">
            <summary>Sets the shim of BranchModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of BranchModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.EmployeesGet">
            <summary>Sets the shim of BranchModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.EmployeesSetIListOfEmployeeModel">
            <summary>Sets the shim of BranchModel.set_Employees(IList`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.MapBranch">
            <summary>Sets the shim of BranchModel.Map(Branch model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.PhoneNumberGet">
            <summary>Sets the shim of BranchModel.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimBranchModel.AllInstances.PhoneNumberSetString">
            <summary>Sets the shim of BranchModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimContactModel">
            <summary>Shim type of Contact.Core.Models.ContactModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimContactModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimContactModel.#ctor(Contact.Core.Models.ContactModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimContactModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimContactModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimContactModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AddressGet">
            <summary>Sets the shim of ContactModel.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AddressSetString">
            <summary>Sets the shim of ContactModel.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.Constructor">
            <summary>Sets the shim of ContactModel.ContactModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.ConstructorContact">
            <summary>Sets the shim of ContactModel.ContactModel(Contact model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.Create">
            <summary>Sets the shim of ContactModel.Create()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.EmailAddressGet">
            <summary>Sets the shim of ContactModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.EmailAddressSetString">
            <summary>Sets the shim of ContactModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.MapContact">
            <summary>Sets the shim of ContactModel.Map(Contact model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.NameGet">
            <summary>Sets the shim of ContactModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.NameSetString">
            <summary>Sets the shim of ContactModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.PhoneNumberGet">
            <summary>Sets the shim of ContactModel.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.PhoneNumberSetString">
            <summary>Sets the shim of ContactModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimContactModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.AddressGet">
            <summary>Sets the shim of ContactModel.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.AddressSetString">
            <summary>Sets the shim of ContactModel.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.Create">
            <summary>Sets the shim of ContactModel.Create()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.EmailAddressGet">
            <summary>Sets the shim of ContactModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of ContactModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.MapContact">
            <summary>Sets the shim of ContactModel.Map(Contact model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.NameGet">
            <summary>Sets the shim of ContactModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.NameSetString">
            <summary>Sets the shim of ContactModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.PhoneNumberGet">
            <summary>Sets the shim of ContactModel.get_PhoneNumber()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimContactModel.AllInstances.PhoneNumberSetString">
            <summary>Sets the shim of ContactModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimCountryModel">
            <summary>Shim type of Contact.Core.Models.CountryModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimCountryModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimCountryModel.#ctor(Contact.Core.Models.CountryModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimCountryModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimCountryModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimCountryModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.Constructor">
            <summary>Sets the shim of CountryModel.CountryModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.ConstructorCountry">
            <summary>Sets the shim of CountryModel.CountryModel(Country model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.CountryIDGet">
            <summary>Sets the shim of CountryModel.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.CountryIDSetInt32">
            <summary>Sets the shim of CountryModel.set_CountryID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.EmployeesGet">
            <summary>Sets the shim of CountryModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the shim of CountryModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.MapCountry">
            <summary>Sets the shim of CountryModel.Map(Country model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.NameGet">
            <summary>Sets the shim of CountryModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.NameSetString">
            <summary>Sets the shim of CountryModel.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.CountryIDGet">
            <summary>Sets the shim of CountryModel.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.CountryIDSetInt32">
            <summary>Sets the shim of CountryModel.set_CountryID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.EmployeesGet">
            <summary>Sets the shim of CountryModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the shim of CountryModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.MapCountry">
            <summary>Sets the shim of CountryModel.Map(Country model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.NameGet">
            <summary>Sets the shim of CountryModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimCountryModel.AllInstances.NameSetString">
            <summary>Sets the shim of CountryModel.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimDepartmentModel">
            <summary>Shim type of Contact.Core.Models.DepartmentModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimDepartmentModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimDepartmentModel.#ctor(Contact.Core.Models.DepartmentModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimDepartmentModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimDepartmentModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimDepartmentModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.Constructor">
            <summary>Sets the shim of DepartmentModel.DepartmentModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.ConstructorDepartment">
            <summary>Sets the shim of DepartmentModel.DepartmentModel(Department model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.CreateDept">
            <summary>Sets the shim of DepartmentModel.CreateDept()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.DeptIDGet">
            <summary>Sets the shim of DepartmentModel.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.DeptIDSetInt32">
            <summary>Sets the shim of DepartmentModel.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.DescriptionGet">
            <summary>Sets the shim of DepartmentModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.DescriptionSetString">
            <summary>Sets the shim of DepartmentModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.EmployeesGet">
            <summary>Sets the shim of DepartmentModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the shim of DepartmentModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.MapDepartment">
            <summary>Sets the shim of DepartmentModel.Map(Department model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.NameGet">
            <summary>Sets the shim of DepartmentModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.NameSetString">
            <summary>Sets the shim of DepartmentModel.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.CreateDept">
            <summary>Sets the shim of DepartmentModel.CreateDept()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.DeptIDGet">
            <summary>Sets the shim of DepartmentModel.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.DeptIDSetInt32">
            <summary>Sets the shim of DepartmentModel.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.DescriptionGet">
            <summary>Sets the shim of DepartmentModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.DescriptionSetString">
            <summary>Sets the shim of DepartmentModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.EmployeesGet">
            <summary>Sets the shim of DepartmentModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the shim of DepartmentModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.MapDepartment">
            <summary>Sets the shim of DepartmentModel.Map(Department model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.NameGet">
            <summary>Sets the shim of DepartmentModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimDepartmentModel.AllInstances.NameSetString">
            <summary>Sets the shim of DepartmentModel.set_Name(String value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimEmployeeModel">
            <summary>Shim type of Contact.Core.Models.EmployeeModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimEmployeeModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimEmployeeModel.#ctor(Contact.Core.Models.EmployeeModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimEmployeeModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimEmployeeModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimEmployeeModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AddressGet">
            <summary>Sets the shim of EmployeeModel.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AddressSetString">
            <summary>Sets the shim of EmployeeModel.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.Constructor">
            <summary>Sets the shim of EmployeeModel.EmployeeModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.ConstructorEmployee">
            <summary>Sets the shim of EmployeeModel.EmployeeModel(Employee emp)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.CountryIDGet">
            <summary>Sets the shim of EmployeeModel.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.CountryIDSetNullableOfInt32">
            <summary>Sets the shim of EmployeeModel.set_CountryID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DateOfBirthGet">
            <summary>Sets the shim of EmployeeModel.get_DateOfBirth()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DateOfBirthSetNullableOfDateTime">
            <summary>Sets the shim of EmployeeModel.set_DateOfBirth(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DepartmentGet">
            <summary>Sets the shim of EmployeeModel.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DepartmentSetDepartmentModel">
            <summary>Sets the shim of EmployeeModel.set_Department(DepartmentModel value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DeptIDGet">
            <summary>Sets the shim of EmployeeModel.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DeptIDSetInt32">
            <summary>Sets the shim of EmployeeModel.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DesignationGet">
            <summary>Sets the shim of EmployeeModel.get_Designation()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.DesignationSetString">
            <summary>Sets the shim of EmployeeModel.set_Designation(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.EmailAddressGet">
            <summary>Sets the shim of EmployeeModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.EmailAddressSetString">
            <summary>Sets the shim of EmployeeModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.EmploymentDateGet">
            <summary>Sets the shim of EmployeeModel.get_EmploymentDate()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.EmploymentDateSetNullableOfDateTime">
            <summary>Sets the shim of EmployeeModel.set_EmploymentDate(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.FirstNameGet">
            <summary>Sets the shim of EmployeeModel.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.FirstNameSetString">
            <summary>Sets the shim of EmployeeModel.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.ImageDataGet">
            <summary>Sets the shim of EmployeeModel.get_ImageData()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.ImageDataSetByteArray">
            <summary>Sets the shim of EmployeeModel.set_ImageData(Byte[] value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.LastNameGet">
            <summary>Sets the shim of EmployeeModel.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.LastNameSetString">
            <summary>Sets the shim of EmployeeModel.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.MapEmployee">
            <summary>Sets the shim of EmployeeModel.Map(Employee emp)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.ReportingToGet">
            <summary>Sets the shim of EmployeeModel.get_ReportingTo()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.ReportingToSetString">
            <summary>Sets the shim of EmployeeModel.set_ReportingTo(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.SexGet">
            <summary>Sets the shim of EmployeeModel.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.SexSetString">
            <summary>Sets the shim of EmployeeModel.set_Sex(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.StateIDGet">
            <summary>Sets the shim of EmployeeModel.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.StateIDSetNullableOfInt32">
            <summary>Sets the shim of EmployeeModel.set_StateID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.UserGet">
            <summary>Sets the shim of EmployeeModel.get_User()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.UserIDGet">
            <summary>Sets the shim of EmployeeModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.UserIDSetInt32">
            <summary>Sets the shim of EmployeeModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.UserSetUser">
            <summary>Sets the shim of EmployeeModel.set_User(User value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.create">
            <summary>Sets the shim of EmployeeModel.create()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.AddressGet">
            <summary>Sets the shim of EmployeeModel.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.AddressSetString">
            <summary>Sets the shim of EmployeeModel.set_Address(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.CountryIDGet">
            <summary>Sets the shim of EmployeeModel.get_CountryID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.CountryIDSetNullableOfInt32">
            <summary>Sets the shim of EmployeeModel.set_CountryID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DateOfBirthGet">
            <summary>Sets the shim of EmployeeModel.get_DateOfBirth()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DateOfBirthSetNullableOfDateTime">
            <summary>Sets the shim of EmployeeModel.set_DateOfBirth(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DepartmentGet">
            <summary>Sets the shim of EmployeeModel.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DepartmentSetDepartmentModel">
            <summary>Sets the shim of EmployeeModel.set_Department(DepartmentModel value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DeptIDGet">
            <summary>Sets the shim of EmployeeModel.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DeptIDSetInt32">
            <summary>Sets the shim of EmployeeModel.set_DeptID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DesignationGet">
            <summary>Sets the shim of EmployeeModel.get_Designation()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.DesignationSetString">
            <summary>Sets the shim of EmployeeModel.set_Designation(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.EmailAddressGet">
            <summary>Sets the shim of EmployeeModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.EmailAddressSetString">
            <summary>Sets the shim of EmployeeModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.EmploymentDateGet">
            <summary>Sets the shim of EmployeeModel.get_EmploymentDate()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.EmploymentDateSetNullableOfDateTime">
            <summary>Sets the shim of EmployeeModel.set_EmploymentDate(Nullable`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.FirstNameGet">
            <summary>Sets the shim of EmployeeModel.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.FirstNameSetString">
            <summary>Sets the shim of EmployeeModel.set_FirstName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.ImageDataGet">
            <summary>Sets the shim of EmployeeModel.get_ImageData()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.ImageDataSetByteArray">
            <summary>Sets the shim of EmployeeModel.set_ImageData(Byte[] value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.LastNameGet">
            <summary>Sets the shim of EmployeeModel.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.LastNameSetString">
            <summary>Sets the shim of EmployeeModel.set_LastName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.MapEmployee">
            <summary>Sets the shim of EmployeeModel.Map(Employee emp)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.ReportingToGet">
            <summary>Sets the shim of EmployeeModel.get_ReportingTo()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.ReportingToSetString">
            <summary>Sets the shim of EmployeeModel.set_ReportingTo(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.SexGet">
            <summary>Sets the shim of EmployeeModel.get_Sex()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.SexSetString">
            <summary>Sets the shim of EmployeeModel.set_Sex(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.StateIDGet">
            <summary>Sets the shim of EmployeeModel.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.StateIDSetNullableOfInt32">
            <summary>Sets the shim of EmployeeModel.set_StateID(Nullable`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.UserGet">
            <summary>Sets the shim of EmployeeModel.get_User()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.UserIDGet">
            <summary>Sets the shim of EmployeeModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of EmployeeModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.UserSetUser">
            <summary>Sets the shim of EmployeeModel.set_User(User value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimEmployeeModel.AllInstances.create">
            <summary>Sets the shim of EmployeeModel.create()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimModel">
            <summary>Shim type of Contact.Core.Models.Model</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimModel.#ctor(Contact.Core.Models.Model)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.AssignObject">
            <summary>Sets the shim of Model.Assign(Object source)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.Constructor">
            <summary>Sets the shim of Model.Model()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.ValidateValidationContext">
            <summary>Sets the shim of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.AllInstances.AssignObject">
            <summary>Sets the shim of Model.Assign(Object source)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimModel.AllInstances.ValidateValidationContext">
            <summary>Sets the shim of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimPermissionModel">
            <summary>Shim type of Contact.Core.Models.PermissionModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimPermissionModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimPermissionModel.#ctor(Contact.Core.Models.PermissionModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimPermissionModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimPermissionModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimPermissionModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.Constructor">
            <summary>Sets the shim of PermissionModel.PermissionModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.ConstructorPermission">
            <summary>Sets the shim of PermissionModel.PermissionModel(Permission entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.DescriptionGet">
            <summary>Sets the shim of PermissionModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.DescriptionSetString">
            <summary>Sets the shim of PermissionModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.MapPermission">
            <summary>Sets the shim of PermissionModel.Map(Permission entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.NameGet">
            <summary>Sets the shim of PermissionModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.NameSetString">
            <summary>Sets the shim of PermissionModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.PermissionIDGet">
            <summary>Sets the shim of PermissionModel.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.PermissionIDSetInt32">
            <summary>Sets the shim of PermissionModel.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.DescriptionGet">
            <summary>Sets the shim of PermissionModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.DescriptionSetString">
            <summary>Sets the shim of PermissionModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.MapPermission">
            <summary>Sets the shim of PermissionModel.Map(Permission entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.NameGet">
            <summary>Sets the shim of PermissionModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.NameSetString">
            <summary>Sets the shim of PermissionModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.PermissionIDGet">
            <summary>Sets the shim of PermissionModel.get_PermissionID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimPermissionModel.AllInstances.PermissionIDSetInt32">
            <summary>Sets the shim of PermissionModel.set_PermissionID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimRoleModel">
            <summary>Shim type of Contact.Core.Models.RoleModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimRoleModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimRoleModel.#ctor(Contact.Core.Models.RoleModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimRoleModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimRoleModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimRoleModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.Constructor">
            <summary>Sets the shim of RoleModel.RoleModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.ConstructorRole">
            <summary>Sets the shim of RoleModel.RoleModel(Role entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.DescriptionGet">
            <summary>Sets the shim of RoleModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.DescriptionSetString">
            <summary>Sets the shim of RoleModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.MapRole">
            <summary>Sets the shim of RoleModel.Map(Role entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.NameGet">
            <summary>Sets the shim of RoleModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.NameSetString">
            <summary>Sets the shim of RoleModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.PermissionsGet">
            <summary>Sets the shim of RoleModel.get_Permissions()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.PermissionsSetICollectionOfPermissionModel">
            <summary>Sets the shim of RoleModel.set_Permissions(ICollection`1&lt;PermissionModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.RoleIDGet">
            <summary>Sets the shim of RoleModel.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.RoleIDSetInt32">
            <summary>Sets the shim of RoleModel.set_RoleID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.DescriptionGet">
            <summary>Sets the shim of RoleModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.DescriptionSetString">
            <summary>Sets the shim of RoleModel.set_Description(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.MapRole">
            <summary>Sets the shim of RoleModel.Map(Role entity)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.NameGet">
            <summary>Sets the shim of RoleModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.NameSetString">
            <summary>Sets the shim of RoleModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.PermissionsGet">
            <summary>Sets the shim of RoleModel.get_Permissions()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.PermissionsSetICollectionOfPermissionModel">
            <summary>Sets the shim of RoleModel.set_Permissions(ICollection`1&lt;PermissionModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.RoleIDGet">
            <summary>Sets the shim of RoleModel.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimRoleModel.AllInstances.RoleIDSetInt32">
            <summary>Sets the shim of RoleModel.set_RoleID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimStateModel">
            <summary>Shim type of Contact.Core.Models.StateModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimStateModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimStateModel.#ctor(Contact.Core.Models.StateModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimStateModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimStateModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimStateModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.Constructor">
            <summary>Sets the shim of StateModel.StateModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.ConstructorState">
            <summary>Sets the shim of StateModel.StateModel(State model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.EmployeeGet">
            <summary>Sets the shim of StateModel.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.EmployeeSetEmployeeModel">
            <summary>Sets the shim of StateModel.set_Employee(EmployeeModel value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.MapState">
            <summary>Sets the shim of StateModel.Map(State model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.NameGet">
            <summary>Sets the shim of StateModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.NameSetString">
            <summary>Sets the shim of StateModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.StateIDGet">
            <summary>Sets the shim of StateModel.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.StateIDSetInt32">
            <summary>Sets the shim of StateModel.set_StateID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimStateModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.EmployeeGet">
            <summary>Sets the shim of StateModel.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.EmployeeSetEmployeeModel">
            <summary>Sets the shim of StateModel.set_Employee(EmployeeModel value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.MapState">
            <summary>Sets the shim of StateModel.Map(State model)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.NameGet">
            <summary>Sets the shim of StateModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.NameSetString">
            <summary>Sets the shim of StateModel.set_Name(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.StateIDGet">
            <summary>Sets the shim of StateModel.get_StateID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimStateModel.AllInstances.StateIDSetInt32">
            <summary>Sets the shim of StateModel.set_StateID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimUserModel">
            <summary>Shim type of Contact.Core.Models.UserModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserModel.#ctor(Contact.Core.Models.UserModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.Constructor">
            <summary>Sets the shim of UserModel.UserModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.ConstructorUser">
            <summary>Sets the shim of UserModel.UserModel(User user)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.Create">
            <summary>Sets the shim of UserModel.Create()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.EmailGet">
            <summary>Sets the shim of UserModel.get_Email()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.EmailSetString">
            <summary>Sets the shim of UserModel.set_Email(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.MapUser">
            <summary>Sets the shim of UserModel.Map(User user)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.PasswordGet">
            <summary>Sets the shim of UserModel.get_Password()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.PasswordSetString">
            <summary>Sets the shim of UserModel.set_Password(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.RolesGet">
            <summary>Sets the shim of UserModel.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.RolesSetICollectionOfRoleModel">
            <summary>Sets the shim of UserModel.set_Roles(ICollection`1&lt;RoleModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.UserIDGet">
            <summary>Sets the shim of UserModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.UserIDSetInt32">
            <summary>Sets the shim of UserModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.UserNameGet">
            <summary>Sets the shim of UserModel.get_UserName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.UserNameSetString">
            <summary>Sets the shim of UserModel.set_UserName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.updateUser">
            <summary>Sets the shim of UserModel.update(User users)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimUserModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.Create">
            <summary>Sets the shim of UserModel.Create()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.EmailGet">
            <summary>Sets the shim of UserModel.get_Email()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.EmailSetString">
            <summary>Sets the shim of UserModel.set_Email(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.MapUser">
            <summary>Sets the shim of UserModel.Map(User user)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.PasswordGet">
            <summary>Sets the shim of UserModel.get_Password()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.PasswordSetString">
            <summary>Sets the shim of UserModel.set_Password(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.RolesGet">
            <summary>Sets the shim of UserModel.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.RolesSetICollectionOfRoleModel">
            <summary>Sets the shim of UserModel.set_Roles(ICollection`1&lt;RoleModel&gt; value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.UserIDGet">
            <summary>Sets the shim of UserModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of UserModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.UserNameGet">
            <summary>Sets the shim of UserModel.get_UserName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.UserNameSetString">
            <summary>Sets the shim of UserModel.set_UserName(String value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserModel.AllInstances.updateUser">
            <summary>Sets the shim of UserModel.update(User users)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimUserRoleModel">
            <summary>Shim type of Contact.Core.Models.UserRoleModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserRoleModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserRoleModel.#ctor(Contact.Core.Models.UserRoleModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserRoleModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserRoleModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.ShimUserRoleModel.Bind(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.Constructor">
            <summary>Sets the shim of UserRoleModel.UserRoleModel()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.ConstructorUserRole">
            <summary>Sets the shim of UserRoleModel.UserRoleModel(UserRole userRole)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.MapUserRole">
            <summary>Sets the shim of UserRoleModel.Map(UserRole userRole)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.RoleIDGet">
            <summary>Sets the shim of UserRoleModel.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.RoleIDSetInt32">
            <summary>Sets the shim of UserRoleModel.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.UserIDGet">
            <summary>Sets the shim of UserRoleModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.UserIDSetInt32">
            <summary>Sets the shim of UserRoleModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances.MapUserRole">
            <summary>Sets the shim of UserRoleModel.Map(UserRole userRole)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances.RoleIDGet">
            <summary>Sets the shim of UserRoleModel.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances.RoleIDSetInt32">
            <summary>Sets the shim of UserRoleModel.set_RoleID(Int32 value)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances.UserIDGet">
            <summary>Sets the shim of UserRoleModel.get_UserID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.ShimUserRoleModel.AllInstances.UserIDSetInt32">
            <summary>Sets the shim of UserRoleModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubBranchModel">
            <summary>Stub type of Contact.Core.Models.BranchModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.#ctor(Contact.Core.DataAccess.Branch)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.AttachBackingFieldToBranchAddress">
            <summary>Attaches delegates to emulate StubBranchModel.BranchAddress as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.AttachBackingFieldToBranchName">
            <summary>Attaches delegates to emulate StubBranchModel.BranchName as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.AttachBackingFieldToEmailAddress">
            <summary>Attaches delegates to emulate StubBranchModel.EmailAddress as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubBranchModel.Employees as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.AttachBackingFieldToPhoneNumber">
            <summary>Attaches delegates to emulate StubBranchModel.PhoneNumber as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.BranchAddressGet">
            <summary>Sets the stub of BranchModel.get_BranchAddress()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.BranchAddressSetString">
            <summary>Sets the stub of BranchModel.set_BranchAddress(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.BranchNameGet">
            <summary>Sets the stub of BranchModel.get_BranchName()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.BranchNameSetString">
            <summary>Sets the stub of BranchModel.set_BranchName(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.EmailAddressGet">
            <summary>Sets the stub of BranchModel.get_EmailAddress()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.EmailAddressSetString">
            <summary>Sets the stub of BranchModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.EmployeesGet">
            <summary>Sets the stub of BranchModel.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.EmployeesSetIListOfEmployeeModel">
            <summary>Sets the stub of BranchModel.set_Employees(IList`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.InitializeStub">
            <summary>Initializes a new instance of type StubBranchModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.PhoneNumberGet">
            <summary>Sets the stub of BranchModel.get_PhoneNumber()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.PhoneNumberSetString">
            <summary>Sets the stub of BranchModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubBranchModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubBranchModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.BranchAddress">
            <summary>Sets the stub of BranchModel.get_BranchAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.BranchName">
            <summary>Sets the stub of BranchModel.get_BranchName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.EmailAddress">
            <summary>Sets the stub of BranchModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.Employees">
            <summary>Sets the stub of BranchModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubBranchModel.PhoneNumber">
            <summary>Sets the stub of BranchModel.get_PhoneNumber()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubContactModel">
            <summary>Stub type of Contact.Core.Models.ContactModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.#ctor(Contact.Core.DataAccess.Contact)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.AddressGet">
            <summary>Sets the stub of ContactModel.get_Address()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.AddressSetString">
            <summary>Sets the stub of ContactModel.set_Address(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.AttachBackingFieldToAddress">
            <summary>Attaches delegates to emulate StubContactModel.Address as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.AttachBackingFieldToEmailAddress">
            <summary>Attaches delegates to emulate StubContactModel.EmailAddress as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.AttachBackingFieldToName">
            <summary>Attaches delegates to emulate StubContactModel.Name as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.AttachBackingFieldToPhoneNumber">
            <summary>Attaches delegates to emulate StubContactModel.PhoneNumber as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.EmailAddressGet">
            <summary>Sets the stub of ContactModel.get_EmailAddress()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.EmailAddressSetString">
            <summary>Sets the stub of ContactModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.InitializeStub">
            <summary>Initializes a new instance of type StubContactModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.NameGet">
            <summary>Sets the stub of ContactModel.get_Name()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.NameSetString">
            <summary>Sets the stub of ContactModel.set_Name(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.PhoneNumberGet">
            <summary>Sets the stub of ContactModel.get_PhoneNumber()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.PhoneNumberSetString">
            <summary>Sets the stub of ContactModel.set_PhoneNumber(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubContactModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubContactModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.Address">
            <summary>Sets the stub of ContactModel.get_Address()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.EmailAddress">
            <summary>Sets the stub of ContactModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.Name">
            <summary>Sets the stub of ContactModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubContactModel.PhoneNumber">
            <summary>Sets the stub of ContactModel.get_PhoneNumber()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubCountryModel">
            <summary>Stub type of Contact.Core.Models.CountryModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubCountryModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubCountryModel.#ctor(Contact.Core.DataAccess.Country)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubCountryModel.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubCountryModel.Employees as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubCountryModel.EmployeesGet">
            <summary>Sets the stub of CountryModel.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubCountryModel.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the stub of CountryModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubCountryModel.InitializeStub">
            <summary>Initializes a new instance of type StubCountryModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubCountryModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubCountryModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubCountryModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubCountryModel.Employees">
            <summary>Sets the stub of CountryModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubCountryModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubCountryModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubDepartmentModel">
            <summary>Stub type of Contact.Core.Models.DepartmentModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.#ctor(Contact.Core.DataAccess.Department)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.AttachBackingFieldToDescription">
            <summary>Attaches delegates to emulate StubDepartmentModel.Description as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.AttachBackingFieldToEmployees">
            <summary>Attaches delegates to emulate StubDepartmentModel.Employees as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.AttachBackingFieldToName">
            <summary>Attaches delegates to emulate StubDepartmentModel.Name as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.DescriptionGet">
            <summary>Sets the stub of DepartmentModel.get_Description()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.DescriptionSetString">
            <summary>Sets the stub of DepartmentModel.set_Description(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.EmployeesGet">
            <summary>Sets the stub of DepartmentModel.get_Employees()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.EmployeesSetICollectionOfEmployeeModel">
            <summary>Sets the stub of DepartmentModel.set_Employees(ICollection`1&lt;EmployeeModel&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.InitializeStub">
            <summary>Initializes a new instance of type StubDepartmentModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.NameGet">
            <summary>Sets the stub of DepartmentModel.get_Name()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.NameSetString">
            <summary>Sets the stub of DepartmentModel.set_Name(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubDepartmentModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubDepartmentModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.Description">
            <summary>Sets the stub of DepartmentModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.Employees">
            <summary>Sets the stub of DepartmentModel.get_Employees()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubDepartmentModel.Name">
            <summary>Sets the stub of DepartmentModel.get_Name()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubEmployeeModel">
            <summary>Stub type of Contact.Core.Models.EmployeeModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.#ctor(Contact.Core.DataAccess.Employee)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToDepartment">
            <summary>Attaches delegates to emulate StubEmployeeModel.Department as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToDeptID">
            <summary>Attaches delegates to emulate StubEmployeeModel.DeptID as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToEmailAddress">
            <summary>Attaches delegates to emulate StubEmployeeModel.EmailAddress as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToFirstName">
            <summary>Attaches delegates to emulate StubEmployeeModel.FirstName as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToImageData">
            <summary>Attaches delegates to emulate StubEmployeeModel.ImageData as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToLastName">
            <summary>Attaches delegates to emulate StubEmployeeModel.LastName as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.AttachBackingFieldToUser">
            <summary>Attaches delegates to emulate StubEmployeeModel.User as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.DepartmentGet">
            <summary>Sets the stub of EmployeeModel.get_Department()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.DepartmentSetDepartmentModel">
            <summary>Sets the stub of EmployeeModel.set_Department(DepartmentModel value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.DeptIDGet">
            <summary>Sets the stub of EmployeeModel.get_DeptID()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.DeptIDSetInt32">
            <summary>Sets the stub of EmployeeModel.set_DeptID(Int32 value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.EmailAddressGet">
            <summary>Sets the stub of EmployeeModel.get_EmailAddress()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.EmailAddressSetString">
            <summary>Sets the stub of EmployeeModel.set_EmailAddress(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.FirstNameGet">
            <summary>Sets the stub of EmployeeModel.get_FirstName()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.FirstNameSetString">
            <summary>Sets the stub of EmployeeModel.set_FirstName(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.ImageDataGet">
            <summary>Sets the stub of EmployeeModel.get_ImageData()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.ImageDataSetByteArray">
            <summary>Sets the stub of EmployeeModel.set_ImageData(Byte[] value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.InitializeStub">
            <summary>Initializes a new instance of type StubEmployeeModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.LastNameGet">
            <summary>Sets the stub of EmployeeModel.get_LastName()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.LastNameSetString">
            <summary>Sets the stub of EmployeeModel.set_LastName(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.UserGet">
            <summary>Sets the stub of EmployeeModel.get_User()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.UserSetUser">
            <summary>Sets the stub of EmployeeModel.set_User(User value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubEmployeeModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubEmployeeModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.Department">
            <summary>Sets the stub of EmployeeModel.get_Department()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.DeptID">
            <summary>Sets the stub of EmployeeModel.get_DeptID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.EmailAddress">
            <summary>Sets the stub of EmployeeModel.get_EmailAddress()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.FirstName">
            <summary>Sets the stub of EmployeeModel.get_FirstName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.ImageData">
            <summary>Sets the stub of EmployeeModel.get_ImageData()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.LastName">
            <summary>Sets the stub of EmployeeModel.get_LastName()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubEmployeeModel.User">
            <summary>Sets the stub of EmployeeModel.get_User()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubModel">
            <summary>Stub type of Contact.Core.Models.Model</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubModel.InitializeStub">
            <summary>Initializes a new instance of type StubModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubPermissionModel">
            <summary>Stub type of Contact.Core.Models.PermissionModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubPermissionModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubPermissionModel.#ctor(Contact.Core.DataAccess.Permission)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubPermissionModel.InitializeStub">
            <summary>Initializes a new instance of type StubPermissionModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubPermissionModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubPermissionModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubPermissionModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubPermissionModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubPermissionModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubRoleModel">
            <summary>Stub type of Contact.Core.Models.RoleModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.#ctor(Contact.Core.DataAccess.Role)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.AttachBackingFieldToDescription">
            <summary>Attaches delegates to emulate StubRoleModel.Description as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.AttachBackingFieldToName">
            <summary>Attaches delegates to emulate StubRoleModel.Name as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.AttachBackingFieldToPermissions">
            <summary>Attaches delegates to emulate StubRoleModel.Permissions as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.DescriptionGet">
            <summary>Sets the stub of RoleModel.get_Description()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.DescriptionSetString">
            <summary>Sets the stub of RoleModel.set_Description(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.InitializeStub">
            <summary>Initializes a new instance of type StubRoleModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.NameGet">
            <summary>Sets the stub of RoleModel.get_Name()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.NameSetString">
            <summary>Sets the stub of RoleModel.set_Name(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.PermissionsGet">
            <summary>Sets the stub of RoleModel.get_Permissions()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.PermissionsSetICollectionOfPermissionModel">
            <summary>Sets the stub of RoleModel.set_Permissions(ICollection`1&lt;PermissionModel&gt; value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubRoleModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubRoleModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.Description">
            <summary>Sets the stub of RoleModel.get_Description()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.Name">
            <summary>Sets the stub of RoleModel.get_Name()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubRoleModel.Permissions">
            <summary>Sets the stub of RoleModel.get_Permissions()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubStateModel">
            <summary>Stub type of Contact.Core.Models.StateModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubStateModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubStateModel.#ctor(Contact.Core.DataAccess.State)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubStateModel.AttachBackingFieldToEmployee">
            <summary>Attaches delegates to emulate StubStateModel.Employee as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubStateModel.EmployeeGet">
            <summary>Sets the stub of StateModel.get_Employee()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubStateModel.EmployeeSetEmployeeModel">
            <summary>Sets the stub of StateModel.set_Employee(EmployeeModel value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubStateModel.InitializeStub">
            <summary>Initializes a new instance of type StubStateModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubStateModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubStateModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubStateModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubStateModel.Employee">
            <summary>Sets the stub of StateModel.get_Employee()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubStateModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubStateModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubUserModel">
            <summary>Stub type of Contact.Core.Models.UserModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.#ctor(Contact.Core.DataAccess.User)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.AttachBackingFieldToEmail">
            <summary>Attaches delegates to emulate StubUserModel.Email as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.AttachBackingFieldToPassword">
            <summary>Attaches delegates to emulate StubUserModel.Password as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.AttachBackingFieldToRoles">
            <summary>Attaches delegates to emulate StubUserModel.Roles as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.AttachBackingFieldToUserName">
            <summary>Attaches delegates to emulate StubUserModel.UserName as a property with a backing field.</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.EmailGet">
            <summary>Sets the stub of UserModel.get_Email()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.EmailSetString">
            <summary>Sets the stub of UserModel.set_Email(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.InitializeStub">
            <summary>Initializes a new instance of type StubUserModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.PasswordGet">
            <summary>Sets the stub of UserModel.get_Password()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.PasswordSetString">
            <summary>Sets the stub of UserModel.set_Password(String value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.RolesGet">
            <summary>Sets the stub of UserModel.get_Roles()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.RolesSetICollectionOfRoleModel">
            <summary>Sets the stub of UserModel.set_Roles(ICollection`1&lt;RoleModel&gt; value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.UserNameGet">
            <summary>Sets the stub of UserModel.get_UserName()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.UserNameSetString">
            <summary>Sets the stub of UserModel.set_UserName(String value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.Email">
            <summary>Sets the stub of UserModel.get_Email()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.Password">
            <summary>Sets the stub of UserModel.get_Password()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.Roles">
            <summary>Sets the stub of UserModel.get_Roles()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserModel.UserName">
            <summary>Sets the stub of UserModel.get_UserName()</summary>
        </member>
        <member name="T:Contact.Core.Models.Fakes.StubUserRoleModel">
            <summary>Stub type of Contact.Core.Models.UserRoleModel</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.#ctor(Contact.Core.DataAccess.UserRole)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.AttachBackingFieldToRoleID">
            <summary>Attaches delegates to emulate StubUserRoleModel.RoleID as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.AttachBackingFieldToUserID">
            <summary>Attaches delegates to emulate StubUserRoleModel.UserID as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.InitializeStub">
            <summary>Initializes a new instance of type StubUserRoleModel</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserRoleModel.RoleIDGet">
            <summary>Sets the stub of UserRoleModel.get_RoleID()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserRoleModel.RoleIDSetInt32">
            <summary>Sets the stub of UserRoleModel.set_RoleID(Int32 value)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserRoleModel.UserIDGet">
            <summary>Sets the stub of UserRoleModel.get_UserID()</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserRoleModel.UserIDSetInt32">
            <summary>Sets the stub of UserRoleModel.set_UserID(Int32 value)</summary>
        </member>
        <member name="M:Contact.Core.Models.Fakes.StubUserRoleModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="F:Contact.Core.Models.Fakes.StubUserRoleModel.ValidateValidationContext">
            <summary>Sets the stub of Model.Validate(ValidationContext validationContext)</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserRoleModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserRoleModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserRoleModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserRoleModel.RoleID">
            <summary>Sets the stub of UserRoleModel.get_RoleID()</summary>
        </member>
        <member name="P:Contact.Core.Models.Fakes.StubUserRoleModel.UserID">
            <summary>Sets the stub of UserRoleModel.get_UserID()</summary>
        </member>
        <member name="T:Contact.Core.Utility.Fakes.ShimHashingHelper">
            <summary>Shim type of Contact.Core.Utility.HashingHelper</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.ShimHashingHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.ShimHashingHelper.#ctor(Contact.Core.Utility.HashingHelper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.ShimHashingHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.ShimHashingHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.ShimHashingHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.ShimHashingHelper.Constructor">
            <summary>Sets the shim of HashingHelper.HashingHelper()</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.ShimHashingHelper.HashPasswordString">
            <summary>Sets the shim of HashingHelper.HashPassword(String password)</summary>
        </member>
        <member name="T:Contact.Core.Utility.Fakes.ShimHashingHelper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.ShimHashingHelper.AllInstances.HashPasswordString">
            <summary>Sets the shim of HashingHelper.HashPassword(String password)</summary>
        </member>
        <member name="T:Contact.Core.Utility.Fakes.StubHashingHelper">
            <summary>Stub type of Contact.Core.Utility.HashingHelper</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.StubHashingHelper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Core.Utility.Fakes.StubHashingHelper.InitializeStub">
            <summary>Initializes a new instance of type StubHashingHelper</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.StubHashingHelper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.StubHashingHelper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Core.Utility.Fakes.StubHashingHelper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Contact.Fakes.ShimOperation">
            <summary>Shim type of Contact.Operation</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation.#ctor(Contact.Operation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.Constructor">
            <summary>Sets the shim of Operation.Operation()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.CreateActionOfOperation">
            <summary>Sets the shim of Operation.Create(Action`1&lt;Operation&gt; process)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.MessageGet">
            <summary>Sets the shim of Operation.get_Message()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.MessageSetString">
            <summary>Sets the shim of Operation.set_Message(String value)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.RunFuncOfOperationTask">
            <summary>Sets the shim of Operation.Run(Func`2&lt;Operation,Task&gt; process)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.StatusGet">
            <summary>Sets the shim of Operation.get_Status()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.StatusSetStatusCode">
            <summary>Sets the shim of Operation.set_Status(StatusCode value)</summary>
        </member>
        <member name="T:Contact.Fakes.ShimOperation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.AllInstances.MessageGet">
            <summary>Sets the shim of Operation.get_Message()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.AllInstances.MessageSetString">
            <summary>Sets the shim of Operation.set_Message(String value)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.AllInstances.StatusGet">
            <summary>Sets the shim of Operation.get_Status()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation.AllInstances.StatusSetStatusCode">
            <summary>Sets the shim of Operation.set_Status(StatusCode value)</summary>
        </member>
        <member name="T:Contact.Fakes.ShimOperation`1">
            <summary>Shim type of Contact.Operation`1</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation`1.#ctor(Contact.Operation{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Contact.Fakes.ShimOperation`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.Constructor">
            <summary>Sets the shim of Operation`1.Operation`1()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.CreateFuncOfOperationOfT0T0">
            <summary>Sets the shim of Operation`1.Create(Func`2&lt;Operation`1&lt;!0&gt;,!0&gt; process)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.ResultGet">
            <summary>Sets the shim of Operation`1.get_Result()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.ResultSetT0">
            <summary>Sets the shim of Operation`1.set_Result(!0 value)</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.RunFuncOfOperationOfT0TaskOfT0">
            <summary>Sets the shim of Operation`1.Run(Func`2&lt;Operation`1&lt;!0&gt;,Task`1&lt;!0&gt;&gt; process)</summary>
        </member>
        <member name="T:Contact.Fakes.ShimOperation`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.AllInstances.ResultGet">
            <summary>Sets the shim of Operation`1.get_Result()</summary>
        </member>
        <member name="P:Contact.Fakes.ShimOperation`1.AllInstances.ResultSetT0">
            <summary>Sets the shim of Operation`1.set_Result(!0 value)</summary>
        </member>
        <member name="T:Contact.Fakes.StubOperation">
            <summary>Stub type of Contact.Operation</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation.AttachBackingFieldToMessage">
            <summary>Attaches delegates to emulate StubOperation.Message as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation.InitializeStub">
            <summary>Initializes a new instance of type StubOperation</summary>
        </member>
        <member name="F:Contact.Fakes.StubOperation.MessageGet">
            <summary>Sets the stub of Operation.get_Message()</summary>
        </member>
        <member name="F:Contact.Fakes.StubOperation.MessageSetString">
            <summary>Sets the stub of Operation.set_Message(String value)</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation.Message">
            <summary>Sets the stub of Operation.get_Message()</summary>
        </member>
        <member name="T:Contact.Fakes.StubOperation`1">
            <summary>Stub type of Contact.Operation`1</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation`1.AttachBackingFieldToMessage">
            <summary>Attaches delegates to emulate StubOperation.Message as a property with a backing field.</summary>
        </member>
        <member name="M:Contact.Fakes.StubOperation`1.InitializeStub">
            <summary>Initializes a new instance of type StubOperation</summary>
        </member>
        <member name="F:Contact.Fakes.StubOperation`1.MessageGet">
            <summary>Sets the stub of Operation.get_Message()</summary>
        </member>
        <member name="F:Contact.Fakes.StubOperation`1.MessageSetString">
            <summary>Sets the stub of Operation.set_Message(String value)</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Contact.Fakes.StubOperation`1.Message">
            <summary>Sets the stub of Operation.get_Message()</summary>
        </member>
    </members>
</doc>
